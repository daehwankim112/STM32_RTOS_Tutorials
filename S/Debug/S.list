
S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006314  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080064e4  080064e4  000074e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006544  08006544  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006544  08006544  00007544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800654c  0800654c  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800654c  0800654c  0000754c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006550  08006550  00007550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006554  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ee8  20000010  08006564  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ef8  08006564  00008ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b722  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b1b  00000000  00000000  00023762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  00027280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001239  00000000  00000000  000289f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000376d  00000000  00000000  00029c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac3c  00000000  00000000  0002d396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd26d  00000000  00000000  00047fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012523f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006420  00000000  00000000  00125284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012b6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080064cc 	.word	0x080064cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080064cc 	.word	0x080064cc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000508:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800050c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	2b00      	cmp	r3, #0
 8000516:	d013      	beq.n	8000540 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000518:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800051c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000520:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000524:	2b00      	cmp	r3, #0
 8000526:	d00b      	beq.n	8000540 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000528:	e000      	b.n	800052c <ITM_SendChar+0x2c>
    {
      __NOP();
 800052a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800052c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0f9      	beq.n	800052a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000536:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	b2d2      	uxtb	r2, r2
 800053e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000540:	687b      	ldr	r3, [r7, #4]
}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
	...

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fbaa 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f81a 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f8dc 	bl	8000718 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000560:	f000 f882 	bl	8000668 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000564:	f000 f8aa 	bl	80006bc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000568:	f003 f9f6 	bl	8003958 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800056c:	4a05      	ldr	r2, [pc, #20]	@ (8000584 <main+0x34>)
 800056e:	2100      	movs	r1, #0
 8000570:	4805      	ldr	r0, [pc, #20]	@ (8000588 <main+0x38>)
 8000572:	f003 fa3b 	bl	80039ec <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a04      	ldr	r2, [pc, #16]	@ (800058c <main+0x3c>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f003 fa10 	bl	80039a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <main+0x30>
 8000584:	08006508 	.word	0x08006508
 8000588:	080008c1 	.word	0x080008c1
 800058c:	20000558 	.word	0x20000558

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	@ 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 031c 	add.w	r3, r7, #28
 800059a:	2234      	movs	r2, #52	@ 0x34
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 ff5a 	bl	8006458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b29      	ldr	r3, [pc, #164]	@ (8000660 <SystemClock_Config+0xd0>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	4a28      	ldr	r2, [pc, #160]	@ (8000660 <SystemClock_Config+0xd0>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c4:	4b26      	ldr	r3, [pc, #152]	@ (8000660 <SystemClock_Config+0xd0>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	4b23      	ldr	r3, [pc, #140]	@ (8000664 <SystemClock_Config+0xd4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a22      	ldr	r2, [pc, #136]	@ (8000664 <SystemClock_Config+0xd4>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b20      	ldr	r3, [pc, #128]	@ (8000664 <SystemClock_Config+0xd4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000604:	23a8      	movs	r3, #168	@ 0xa8
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060c:	2307      	movs	r3, #7
 800060e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fe5b 	bl	80022d4 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000624:	f000 f972 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000634:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2105      	movs	r1, #5
 8000646:	4618      	mov	r0, r3
 8000648:	f000 ff9e 	bl	8001588 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000652:	f000 f95b 	bl	800090c <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	@ 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800066c:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <MX_USART3_UART_Init+0x4c>)
 800066e:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <MX_USART3_UART_Init+0x50>)
 8000670:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <MX_USART3_UART_Init+0x4c>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <MX_USART3_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <MX_USART3_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <MX_USART3_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <MX_USART3_UART_Init+0x4c>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <MX_USART3_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <MX_USART3_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_USART3_UART_Init+0x4c>)
 80006a0:	f002 fb58 	bl	8002d54 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006aa:	f000 f92f 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000002c 	.word	0x2000002c
 80006b8:	40004800 	.word	0x40004800

080006bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ca:	2206      	movs	r2, #6
 80006cc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006ce:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d0:	2202      	movs	r2, #2
 80006d2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006dc:	2202      	movs	r2, #2
 80006de:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000700:	f000 fe07 	bl	8001312 <HAL_PCD_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800070a:	f000 f8ff 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000074 	.word	0x20000074

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08c      	sub	sp, #48	@ 0x30
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	4b57      	ldr	r3, [pc, #348]	@ (8000890 <MX_GPIO_Init+0x178>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a56      	ldr	r2, [pc, #344]	@ (8000890 <MX_GPIO_Init+0x178>)
 8000738:	f043 0310 	orr.w	r3, r3, #16
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b54      	ldr	r3, [pc, #336]	@ (8000890 <MX_GPIO_Init+0x178>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	4b50      	ldr	r3, [pc, #320]	@ (8000890 <MX_GPIO_Init+0x178>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a4f      	ldr	r2, [pc, #316]	@ (8000890 <MX_GPIO_Init+0x178>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b4d      	ldr	r3, [pc, #308]	@ (8000890 <MX_GPIO_Init+0x178>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b49      	ldr	r3, [pc, #292]	@ (8000890 <MX_GPIO_Init+0x178>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a48      	ldr	r2, [pc, #288]	@ (8000890 <MX_GPIO_Init+0x178>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b46      	ldr	r3, [pc, #280]	@ (8000890 <MX_GPIO_Init+0x178>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b42      	ldr	r3, [pc, #264]	@ (8000890 <MX_GPIO_Init+0x178>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a41      	ldr	r2, [pc, #260]	@ (8000890 <MX_GPIO_Init+0x178>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b3f      	ldr	r3, [pc, #252]	@ (8000890 <MX_GPIO_Init+0x178>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000890 <MX_GPIO_Init+0x178>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a3a      	ldr	r2, [pc, #232]	@ (8000890 <MX_GPIO_Init+0x178>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b38      	ldr	r3, [pc, #224]	@ (8000890 <MX_GPIO_Init+0x178>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b34      	ldr	r3, [pc, #208]	@ (8000890 <MX_GPIO_Init+0x178>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a33      	ldr	r2, [pc, #204]	@ (8000890 <MX_GPIO_Init+0x178>)
 80007c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b31      	ldr	r3, [pc, #196]	@ (8000890 <MX_GPIO_Init+0x178>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b2d      	ldr	r3, [pc, #180]	@ (8000890 <MX_GPIO_Init+0x178>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a2c      	ldr	r2, [pc, #176]	@ (8000890 <MX_GPIO_Init+0x178>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000890 <MX_GPIO_Init+0x178>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007f8:	4826      	ldr	r0, [pc, #152]	@ (8000894 <MX_GPIO_Init+0x17c>)
 80007fa:	f000 fd33 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	@ 0x40
 8000802:	4825      	ldr	r0, [pc, #148]	@ (8000898 <MX_GPIO_Init+0x180>)
 8000804:	f000 fd2e 	bl	8001264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000808:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	481f      	ldr	r0, [pc, #124]	@ (800089c <MX_GPIO_Init+0x184>)
 8000820:	f000 fb8c 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LD3_Pin|LD2_Pin;
 8000824:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4815      	ldr	r0, [pc, #84]	@ (8000894 <MX_GPIO_Init+0x17c>)
 800083e:	f000 fb7d 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000842:	2340      	movs	r3, #64	@ 0x40
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	480f      	ldr	r0, [pc, #60]	@ (8000898 <MX_GPIO_Init+0x180>)
 800085a:	f000 fb6f 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800085e:	2380      	movs	r3, #128	@ 0x80
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4809      	ldr	r0, [pc, #36]	@ (8000898 <MX_GPIO_Init+0x180>)
 8000872:	f000 fb63 	bl	8000f3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2105      	movs	r1, #5
 800087a:	2028      	movs	r0, #40	@ 0x28
 800087c:	f000 fb34 	bl	8000ee8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000880:	2028      	movs	r0, #40	@ 0x28
 8000882:	f000 fb4d 	bl	8000f20 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000886:	bf00      	nop
 8000888:	3730      	adds	r7, #48	@ 0x30
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	40020400 	.word	0x40020400
 8000898:	40021800 	.word	0x40021800
 800089c:	40020800 	.word	0x40020800

080008a0 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
	ITM_SendChar(message);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe27 	bl	8000500 <ITM_SendChar>
	ITM_SendChar('\n');
 80008b2:	200a      	movs	r0, #10
 80008b4:	f7ff fe24 	bl	8000500 <ITM_SendChar>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80008c8:	2101      	movs	r1, #1
 80008ca:	4806      	ldr	r0, [pc, #24]	@ (80008e4 <StartDefaultTask+0x24>)
 80008cc:	f000 fce3 	bl	8001296 <HAL_GPIO_TogglePin>
		Task_action('1');
 80008d0:	2031      	movs	r0, #49	@ 0x31
 80008d2:	f7ff ffe5 	bl	80008a0 <Task_action>
		osDelay(500);
 80008d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008da:	f003 f919 	bl	8003b10 <osDelay>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80008de:	bf00      	nop
 80008e0:	e7f2      	b.n	80008c8 <StartDefaultTask+0x8>
 80008e2:	bf00      	nop
 80008e4:	40020400 	.word	0x40020400

080008e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a04      	ldr	r2, [pc, #16]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d101      	bne.n	80008fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fa:	f000 f9f9 	bl	8000cf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40001000 	.word	0x40001000

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <Error_Handler+0x8>

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_MspInit+0x54>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000926:	4a11      	ldr	r2, [pc, #68]	@ (800096c <HAL_MspInit+0x54>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800092c:	6453      	str	r3, [r2, #68]	@ 0x44
 800092e:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <HAL_MspInit+0x54>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <HAL_MspInit+0x54>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <HAL_MspInit+0x54>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000948:	6413      	str	r3, [r2, #64]	@ 0x40
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <HAL_MspInit+0x54>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	210f      	movs	r1, #15
 800095a:	f06f 0001 	mvn.w	r0, #1
 800095e:	f000 fac3 	bl	8000ee8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	@ 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a19      	ldr	r2, [pc, #100]	@ (80009f4 <HAL_UART_MspInit+0x84>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d12c      	bne.n	80009ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <HAL_UART_MspInit+0x88>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	4a17      	ldr	r2, [pc, #92]	@ (80009f8 <HAL_UART_MspInit+0x88>)
 800099c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <HAL_UART_MspInit+0x88>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <HAL_UART_MspInit+0x88>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a10      	ldr	r2, [pc, #64]	@ (80009f8 <HAL_UART_MspInit+0x88>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <HAL_UART_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009dc:	2307      	movs	r3, #7
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <HAL_UART_MspInit+0x8c>)
 80009e8:	f000 faa8 	bl	8000f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	@ 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40004800 	.word	0x40004800
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020c00 	.word	0x40020c00

08000a00 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b0a0      	sub	sp, #128	@ 0x80
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	225c      	movs	r2, #92	@ 0x5c
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f005 fd19 	bl	8006458 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a2e:	d14e      	bne.n	8000ace <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000a36:	2300      	movs	r3, #0
 8000a38:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 feee 	bl	8001820 <HAL_RCCEx_PeriphCLKConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000a4a:	f7ff ff5f 	bl	800090c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <HAL_PCD_MspInit+0xd8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a20      	ldr	r2, [pc, #128]	@ (8000ad8 <HAL_PCD_MspInit+0xd8>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <HAL_PCD_MspInit+0xd8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a6a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000a6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a7c:	230a      	movs	r3, #10
 8000a7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a84:	4619      	mov	r1, r3
 8000a86:	4815      	ldr	r0, [pc, #84]	@ (8000adc <HAL_PCD_MspInit+0xdc>)
 8000a88:	f000 fa58 	bl	8000f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a90:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a92:	2300      	movs	r3, #0
 8000a94:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480e      	ldr	r0, [pc, #56]	@ (8000adc <HAL_PCD_MspInit+0xdc>)
 8000aa2:	f000 fa4b 	bl	8000f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <HAL_PCD_MspInit+0xd8>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad8 <HAL_PCD_MspInit+0xd8>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab0:	6353      	str	r3, [r2, #52]	@ 0x34
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <HAL_PCD_MspInit+0xd8>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	4a07      	ldr	r2, [pc, #28]	@ (8000ad8 <HAL_PCD_MspInit+0xd8>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac2:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <HAL_PCD_MspInit+0xd8>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3780      	adds	r7, #128	@ 0x80
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000

08000ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	@ 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	4b33      	ldr	r3, [pc, #204]	@ (8000bc4 <HAL_InitTick+0xe4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af8:	4a32      	ldr	r2, [pc, #200]	@ (8000bc4 <HAL_InitTick+0xe4>)
 8000afa:	f043 0310 	orr.w	r3, r3, #16
 8000afe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b00:	4b30      	ldr	r3, [pc, #192]	@ (8000bc4 <HAL_InitTick+0xe4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b0c:	f107 0210 	add.w	r2, r7, #16
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 fe50 	bl	80017bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b1c:	6a3b      	ldr	r3, [r7, #32]
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d103      	bne.n	8000b2e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b26:	f000 fe21 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 8000b2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b2c:	e004      	b.n	8000b38 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b2e:	f000 fe1d 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 8000b32:	4603      	mov	r3, r0
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b3a:	4a23      	ldr	r2, [pc, #140]	@ (8000bc8 <HAL_InitTick+0xe8>)
 8000b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b40:	0c9b      	lsrs	r3, r3, #18
 8000b42:	3b01      	subs	r3, #1
 8000b44:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <HAL_InitTick+0xec>)
 8000b48:	4a21      	ldr	r2, [pc, #132]	@ (8000bd0 <HAL_InitTick+0xf0>)
 8000b4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <HAL_InitTick+0xec>)
 8000b4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b54:	4a1d      	ldr	r2, [pc, #116]	@ (8000bcc <HAL_InitTick+0xec>)
 8000b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <HAL_InitTick+0xec>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b60:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <HAL_InitTick+0xec>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b66:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <HAL_InitTick+0xec>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b6c:	4817      	ldr	r0, [pc, #92]	@ (8000bcc <HAL_InitTick+0xec>)
 8000b6e:	f001 fe4f 	bl	8002810 <HAL_TIM_Base_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d11b      	bne.n	8000bb8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b80:	4812      	ldr	r0, [pc, #72]	@ (8000bcc <HAL_InitTick+0xec>)
 8000b82:	f001 fe9f 	bl	80028c4 <HAL_TIM_Base_Start_IT>
 8000b86:	4603      	mov	r3, r0
 8000b88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d111      	bne.n	8000bb8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b94:	2036      	movs	r0, #54	@ 0x36
 8000b96:	f000 f9c3 	bl	8000f20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d808      	bhi.n	8000bb2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	2036      	movs	r0, #54	@ 0x36
 8000ba6:	f000 f99f 	bl	8000ee8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <HAL_InitTick+0xf4>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	e002      	b.n	8000bb8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3738      	adds	r7, #56	@ 0x38
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	431bde83 	.word	0x431bde83
 8000bcc:	2000055c 	.word	0x2000055c
 8000bd0:	40001000 	.word	0x40001000
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <NMI_Handler+0x4>

08000be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <MemManage_Handler+0x4>

08000bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <UsageFault_Handler+0x4>

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000c12:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c16:	f000 fb59 	bl	80012cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <TIM6_DAC_IRQHandler+0x10>)
 8000c26:	f001 febd 	bl	80029a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000055c 	.word	0x2000055c

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c5c:	f7ff ffea 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c86:	f005 fbef 	bl	8006468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fc61 	bl	8000550 <main>
  bx  lr    
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c9c:	08006554 	.word	0x08006554
  ldr r2, =_sbss
 8000ca0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ca4:	20004ef8 	.word	0x20004ef8

08000ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <HAL_Init+0x40>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <HAL_Init+0x40>)
 8000cc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <HAL_Init+0x40>)
 8000cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f8fc 	bl	8000ed2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	200f      	movs	r0, #15
 8000cdc:	f7ff ff00 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fe1a 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	@ (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	200005a4 	.word	0x200005a4

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	@ (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200005a4 	.word	0x200005a4

08000d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff ffee 	bl	8000d18 <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d48:	d005      	beq.n	8000d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <HAL_Delay+0x44>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d56:	bf00      	nop
 8000d58:	f7ff ffde 	bl	8000d18 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f7      	bhi.n	8000d58 <HAL_Delay+0x28>
  {
  }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008

08000d78 <__NVIC_SetPriorityGrouping>:
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_EnableIRQ>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db0b      	blt.n	8000e06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 021f 	and.w	r2, r3, #31
 8000df4:	4907      	ldr	r1, [pc, #28]	@ (8000e14 <__NVIC_EnableIRQ+0x38>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	095b      	lsrs	r3, r3, #5
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	@ (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	@ (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	@ 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	@ 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ff4c 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efa:	f7ff ff61 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000efe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	6978      	ldr	r0, [r7, #20]
 8000f06:	f7ff ffb1 	bl	8000e6c <NVIC_EncodePriority>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff80 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff54 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	@ 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	e165      	b.n	8001224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	f040 8154 	bne.w	800121e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d005      	beq.n	8000f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d130      	bne.n	8000ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	f003 0201 	and.w	r2, r3, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d017      	beq.n	800102c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d123      	bne.n	8001080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	69b9      	ldr	r1, [r7, #24]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0203 	and.w	r2, r3, #3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80ae 	beq.w	800121e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b5d      	ldr	r3, [pc, #372]	@ (800123c <HAL_GPIO_Init+0x300>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	4a5c      	ldr	r2, [pc, #368]	@ (800123c <HAL_GPIO_Init+0x300>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d2:	4b5a      	ldr	r3, [pc, #360]	@ (800123c <HAL_GPIO_Init+0x300>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010de:	4a58      	ldr	r2, [pc, #352]	@ (8001240 <HAL_GPIO_Init+0x304>)
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4f      	ldr	r2, [pc, #316]	@ (8001244 <HAL_GPIO_Init+0x308>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d025      	beq.n	8001156 <HAL_GPIO_Init+0x21a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4e      	ldr	r2, [pc, #312]	@ (8001248 <HAL_GPIO_Init+0x30c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d01f      	beq.n	8001152 <HAL_GPIO_Init+0x216>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4d      	ldr	r2, [pc, #308]	@ (800124c <HAL_GPIO_Init+0x310>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d019      	beq.n	800114e <HAL_GPIO_Init+0x212>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4c      	ldr	r2, [pc, #304]	@ (8001250 <HAL_GPIO_Init+0x314>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d013      	beq.n	800114a <HAL_GPIO_Init+0x20e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4b      	ldr	r2, [pc, #300]	@ (8001254 <HAL_GPIO_Init+0x318>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d00d      	beq.n	8001146 <HAL_GPIO_Init+0x20a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4a      	ldr	r2, [pc, #296]	@ (8001258 <HAL_GPIO_Init+0x31c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d007      	beq.n	8001142 <HAL_GPIO_Init+0x206>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a49      	ldr	r2, [pc, #292]	@ (800125c <HAL_GPIO_Init+0x320>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_GPIO_Init+0x202>
 800113a:	2306      	movs	r3, #6
 800113c:	e00c      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 800113e:	2307      	movs	r3, #7
 8001140:	e00a      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001142:	2305      	movs	r3, #5
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001146:	2304      	movs	r3, #4
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	@ (8001240 <HAL_GPIO_Init+0x304>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b3a      	ldr	r3, [pc, #232]	@ (8001260 <HAL_GPIO_Init+0x324>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a31      	ldr	r2, [pc, #196]	@ (8001260 <HAL_GPIO_Init+0x324>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a26      	ldr	r2, [pc, #152]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ca:	4b25      	ldr	r3, [pc, #148]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <HAL_GPIO_Init+0x324>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001218:	4a11      	ldr	r2, [pc, #68]	@ (8001260 <HAL_GPIO_Init+0x324>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f ae96 	bls.w	8000f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	@ 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40021400 	.word	0x40021400
 800125c:	40021800 	.word	0x40021800
 8001260:	40013c00 	.word	0x40013c00

08001264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
 8001270:	4613      	mov	r3, r2
 8001272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001274:	787b      	ldrb	r3, [r7, #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001280:	e003      	b.n	800128a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001282:	887b      	ldrh	r3, [r7, #2]
 8001284:	041a      	lsls	r2, r3, #16
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001296:	b480      	push	{r7}
 8001298:	b085      	sub	sp, #20
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a8:	887a      	ldrh	r2, [r7, #2]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4013      	ands	r3, r2
 80012ae:	041a      	lsls	r2, r3, #16
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	400b      	ands	r3, r1
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012d6:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	4013      	ands	r3, r2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f806 	bl	80012fc <HAL_GPIO_EXTI_Callback>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40013c00 	.word	0x40013c00

080012fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af02      	add	r7, sp, #8
 8001318:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e108      	b.n	8001536 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d106      	bne.n	8001344 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fb5e 	bl	8000a00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2203      	movs	r2, #3
 8001348:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001352:	d102      	bne.n	800135a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f002 f820 	bl	80033a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7c1a      	ldrb	r2, [r3, #16]
 800136c:	f88d 2000 	strb.w	r2, [sp]
 8001370:	3304      	adds	r3, #4
 8001372:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001374:	f001 ffb2 	bl	80032dc <USB_CoreInit>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2202      	movs	r2, #2
 8001382:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0d5      	b.n	8001536 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f002 f818 	bl	80033c6 <USB_SetCurrentMode>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0c6      	b.n	8001536 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e04a      	b.n	8001444 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	3315      	adds	r3, #21
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	3314      	adds	r3, #20
 80013d2:	7bfa      	ldrb	r2, [r7, #15]
 80013d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	b298      	uxth	r0, r3
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	332e      	adds	r3, #46	@ 0x2e
 80013ea:	4602      	mov	r2, r0
 80013ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3318      	adds	r3, #24
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	331c      	adds	r3, #28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3320      	adds	r3, #32
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	3324      	adds	r3, #36	@ 0x24
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	3301      	adds	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	791b      	ldrb	r3, [r3, #4]
 8001448:	7bfa      	ldrb	r2, [r7, #15]
 800144a:	429a      	cmp	r2, r3
 800144c:	d3af      	bcc.n	80013ae <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e044      	b.n	80014de <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	3301      	adds	r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	791b      	ldrb	r3, [r3, #4]
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d3b5      	bcc.n	8001454 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6818      	ldr	r0, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7c1a      	ldrb	r2, [r3, #16]
 80014f0:	f88d 2000 	strb.w	r2, [sp]
 80014f4:	3304      	adds	r3, #4
 80014f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f8:	f001 ffb2 	bl	8003460 <USB_DevInit>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2202      	movs	r2, #2
 8001506:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e013      	b.n	8001536 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7b1b      	ldrb	r3, [r3, #12]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d102      	bne.n	800152a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f80a 	bl	800153e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f002 f96d 	bl	800380e <USB_DevDisconnect>

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001570:	f043 0303 	orr.w	r3, r3, #3
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0cc      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800159c:	4b68      	ldr	r3, [pc, #416]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 030f 	and.w	r3, r3, #15
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d90c      	bls.n	80015c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b65      	ldr	r3, [pc, #404]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b63      	ldr	r3, [pc, #396]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0b8      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015dc:	4b59      	ldr	r3, [pc, #356]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4a58      	ldr	r2, [pc, #352]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f4:	4b53      	ldr	r3, [pc, #332]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a52      	ldr	r2, [pc, #328]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001600:	4b50      	ldr	r3, [pc, #320]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	494d      	ldr	r1, [pc, #308]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d044      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b47      	ldr	r3, [pc, #284]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d119      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e07f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d003      	beq.n	8001646 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001642:	2b03      	cmp	r3, #3
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001646:	4b3f      	ldr	r3, [pc, #252]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e06f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001656:	4b3b      	ldr	r3, [pc, #236]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e067      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001666:	4b37      	ldr	r3, [pc, #220]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f023 0203 	bic.w	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4934      	ldr	r1, [pc, #208]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	4313      	orrs	r3, r2
 8001676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001678:	f7ff fb4e 	bl	8000d18 <HAL_GetTick>
 800167c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	e00a      	b.n	8001696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001680:	f7ff fb4a 	bl	8000d18 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e04f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 020c 	and.w	r2, r3, #12
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d1eb      	bne.n	8001680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016a8:	4b25      	ldr	r3, [pc, #148]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d20c      	bcs.n	80016d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b6:	4b22      	ldr	r3, [pc, #136]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b20      	ldr	r3, [pc, #128]	@ (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e032      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4916      	ldr	r1, [pc, #88]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	490e      	ldr	r1, [pc, #56]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800170e:	f000 fbb1 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 8001712:	4602      	mov	r2, r0
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	490a      	ldr	r1, [pc, #40]	@ (8001748 <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	5ccb      	ldrb	r3, [r1, r3]
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	4a09      	ldr	r2, [pc, #36]	@ (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff f9d6 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023c00 	.word	0x40023c00
 8001744:	40023800 	.word	0x40023800
 8001748:	0800652c 	.word	0x0800652c
 800174c:	20000000 	.word	0x20000000
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001758:	4b03      	ldr	r3, [pc, #12]	@ (8001768 <HAL_RCC_GetHCLKFreq+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000000 	.word	0x20000000

0800176c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001770:	f7ff fff0 	bl	8001754 <HAL_RCC_GetHCLKFreq>
 8001774:	4602      	mov	r2, r0
 8001776:	4b05      	ldr	r3, [pc, #20]	@ (800178c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	0a9b      	lsrs	r3, r3, #10
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	4903      	ldr	r1, [pc, #12]	@ (8001790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001782:	5ccb      	ldrb	r3, [r1, r3]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001788:	4618      	mov	r0, r3
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40023800 	.word	0x40023800
 8001790:	0800653c 	.word	0x0800653c

08001794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001798:	f7ff ffdc 	bl	8001754 <HAL_RCC_GetHCLKFreq>
 800179c:	4602      	mov	r2, r0
 800179e:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	0b5b      	lsrs	r3, r3, #13
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	4903      	ldr	r1, [pc, #12]	@ (80017b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017aa:	5ccb      	ldrb	r3, [r1, r3]
 80017ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40023800 	.word	0x40023800
 80017b8:	0800653c 	.word	0x0800653c

080017bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	220f      	movs	r2, #15
 80017ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_RCC_GetClockConfig+0x5c>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 0203 	and.w	r2, r3, #3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <HAL_RCC_GetClockConfig+0x5c>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <HAL_RCC_GetClockConfig+0x5c>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <HAL_RCC_GetClockConfig+0x5c>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	08db      	lsrs	r3, r3, #3
 80017f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <HAL_RCC_GetClockConfig+0x60>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 020f 	and.w	r2, r3, #15
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	601a      	str	r2, [r3, #0]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800
 800181c:	40023c00 	.word	0x40023c00

08001820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	@ 0x30
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d010      	beq.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001858:	4b6f      	ldr	r3, [pc, #444]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800185a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800185e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001866:	496c      	ldr	r1, [pc, #432]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001868:	4313      	orrs	r3, r2
 800186a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001876:	2301      	movs	r3, #1
 8001878:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d010      	beq.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001886:	4b64      	ldr	r3, [pc, #400]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800188c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001894:	4960      	ldr	r1, [pc, #384]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001896:	4313      	orrs	r3, r2
 8001898:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80018a4:	2301      	movs	r3, #1
 80018a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d017      	beq.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018b4:	4b58      	ldr	r3, [pc, #352]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4955      	ldr	r1, [pc, #340]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018d2:	d101      	bne.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80018d4:	2301      	movs	r3, #1
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80018e0:	2301      	movs	r3, #1
 80018e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d017      	beq.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018f0:	4b49      	ldr	r3, [pc, #292]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018fe:	4946      	ldr	r1, [pc, #280]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001900:	4313      	orrs	r3, r2
 8001902:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800190a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800190e:	d101      	bne.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001910:	2301      	movs	r3, #1
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800191c:	2301      	movs	r3, #1
 800191e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0320 	and.w	r3, r3, #32
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 808a 	beq.w	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	4a38      	ldr	r2, [pc, #224]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800193c:	6413      	str	r3, [r2, #64]	@ 0x40
 800193e:	4b36      	ldr	r3, [pc, #216]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800194a:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a33      	ldr	r2, [pc, #204]	@ (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001954:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001956:	f7ff f9df 	bl	8000d18 <HAL_GetTick>
 800195a:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800195e:	f7ff f9db 	bl	8000d18 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e278      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001970:	4b2a      	ldr	r3, [pc, #168]	@ (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800197c:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001980:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001984:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d02f      	beq.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001994:	6a3a      	ldr	r2, [r7, #32]
 8001996:	429a      	cmp	r2, r3
 8001998:	d028      	beq.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800199a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019a2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80019b0:	4a19      	ldr	r2, [pc, #100]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80019b6:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d114      	bne.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff f9a9 	bl	8000d18 <HAL_GetTick>
 80019c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7ff f9a5 	bl	8000d18 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e240      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ee      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80019f8:	d114      	bne.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80019fa:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a0e:	4902      	ldr	r1, [pc, #8]	@ (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]
 8001a14:	e00c      	b.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40007000 	.word	0x40007000
 8001a20:	42470e40 	.word	0x42470e40
 8001a24:	4b4a      	ldr	r3, [pc, #296]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4a49      	ldr	r2, [pc, #292]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a2a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001a2e:	6093      	str	r3, [r2, #8]
 8001a30:	4b47      	ldr	r3, [pc, #284]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3c:	4944      	ldr	r1, [pc, #272]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d004      	beq.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001a54:	4b3f      	ldr	r3, [pc, #252]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001a56:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00a      	beq.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001a64:	4b3a      	ldr	r3, [pc, #232]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a72:	4937      	ldr	r1, [pc, #220]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00a      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a86:	4b32      	ldr	r3, [pc, #200]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a8c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a94:	492e      	ldr	r1, [pc, #184]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d011      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001aa8:	4b29      	ldr	r3, [pc, #164]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aae:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab6:	4926      	ldr	r1, [pc, #152]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ac6:	d101      	bne.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00a      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ade:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae6:	491a      	ldr	r1, [pc, #104]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d011      	beq.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b00:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b08:	4911      	ldr	r1, [pc, #68]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b18:	d101      	bne.n	8001b1e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d005      	beq.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b2c:	f040 80ff 	bne.w	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b30:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b36:	f7ff f8ef 	bl	8000d18 <HAL_GetTick>
 8001b3a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b3c:	e00e      	b.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b3e:	f7ff f8eb 	bl	8000d18 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d907      	bls.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e188      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001b50:	40023800 	.word	0x40023800
 8001b54:	424711e0 	.word	0x424711e0
 8001b58:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001b5c:	4b7e      	ldr	r3, [pc, #504]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1ea      	bne.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d009      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d028      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d124      	bne.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b90:	4b71      	ldr	r3, [pc, #452]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b96:	0c1b      	lsrs	r3, r3, #16
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ba8:	0e1b      	lsrs	r3, r3, #24
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	019b      	lsls	r3, r3, #6
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	085b      	lsrs	r3, r3, #1
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	041b      	lsls	r3, r3, #16
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	061b      	lsls	r3, r3, #24
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	071b      	lsls	r3, r3, #28
 8001bd2:	4961      	ldr	r1, [pc, #388]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001bee:	d00a      	beq.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d035      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c04:	d130      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c06:	4b54      	ldr	r3, [pc, #336]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c0c:	0c1b      	lsrs	r3, r3, #16
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	3301      	adds	r3, #1
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c18:	4b4f      	ldr	r3, [pc, #316]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c1e:	0f1b      	lsrs	r3, r3, #28
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	019b      	lsls	r3, r3, #6
 8001c30:	431a      	orrs	r2, r3
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	3b01      	subs	r3, #1
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	061b      	lsls	r3, r3, #24
 8001c42:	431a      	orrs	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	071b      	lsls	r3, r3, #28
 8001c48:	4943      	ldr	r1, [pc, #268]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001c50:	4b41      	ldr	r3, [pc, #260]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c56:	f023 021f 	bic.w	r2, r3, #31
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	493d      	ldr	r1, [pc, #244]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d029      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c7c:	d124      	bne.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c7e:	4b36      	ldr	r3, [pc, #216]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c90:	4b31      	ldr	r3, [pc, #196]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c96:	0f1b      	lsrs	r3, r3, #28
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	019b      	lsls	r3, r3, #6
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	085b      	lsrs	r3, r3, #1
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	041b      	lsls	r3, r3, #16
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	061b      	lsls	r3, r3, #24
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	071b      	lsls	r3, r3, #28
 8001cc0:	4925      	ldr	r1, [pc, #148]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d016      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	019b      	lsls	r3, r3, #6
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	085b      	lsrs	r3, r3, #1
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	041b      	lsls	r3, r3, #16
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	071b      	lsls	r3, r3, #28
 8001cfa:	4917      	ldr	r1, [pc, #92]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d02:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d08:	f7ff f806 	bl	8000d18 <HAL_GetTick>
 8001d0c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001d10:	f7ff f802 	bl	8000d18 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e09f      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d22:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	f040 8095 	bne.w	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001d36:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d3c:	f7fe ffec 	bl	8000d18 <HAL_GetTick>
 8001d40:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d42:	e00f      	b.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001d44:	f7fe ffe8 	bl	8000d18 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d908      	bls.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e085      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	42470068 	.word	0x42470068
 8001d60:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001d64:	4b41      	ldr	r3, [pc, #260]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d70:	d0e8      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d009      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d02b      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d127      	bne.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001d9a:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001da0:	0c1b      	lsrs	r3, r3, #16
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	3301      	adds	r3, #1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	019b      	lsls	r3, r3, #6
 8001db6:	431a      	orrs	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	085b      	lsrs	r3, r3, #1
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	041b      	lsls	r3, r3, #16
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc6:	061b      	lsls	r3, r3, #24
 8001dc8:	4928      	ldr	r1, [pc, #160]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001dd0:	4b26      	ldr	r3, [pc, #152]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dd6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dde:	3b01      	subs	r3, #1
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	4922      	ldr	r1, [pc, #136]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d01d      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001dfe:	d118      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001e00:	4b1a      	ldr	r3, [pc, #104]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e06:	0e1b      	lsrs	r3, r3, #24
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699a      	ldr	r2, [r3, #24]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	019b      	lsls	r3, r3, #6
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	085b      	lsrs	r3, r3, #1
 8001e20:	3b01      	subs	r3, #1
 8001e22:	041b      	lsls	r3, r3, #16
 8001e24:	431a      	orrs	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	4910      	ldr	r1, [pc, #64]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001e32:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e38:	f7fe ff6e 	bl	8000d18 <HAL_GetTick>
 8001e3c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e40:	f7fe ff6a 	bl	8000d18 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e007      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e5e:	d1ef      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3730      	adds	r7, #48	@ 0x30
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	42470070 	.word	0x42470070

08001e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e78:	b0ae      	sub	sp, #184	@ 0xb8
 8001e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e9a:	4bcb      	ldr	r3, [pc, #812]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	f200 8206 	bhi.w	80022b4 <HAL_RCC_GetSysClockFreq+0x440>
 8001ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eae:	bf00      	nop
 8001eb0:	08001ee5 	.word	0x08001ee5
 8001eb4:	080022b5 	.word	0x080022b5
 8001eb8:	080022b5 	.word	0x080022b5
 8001ebc:	080022b5 	.word	0x080022b5
 8001ec0:	08001eed 	.word	0x08001eed
 8001ec4:	080022b5 	.word	0x080022b5
 8001ec8:	080022b5 	.word	0x080022b5
 8001ecc:	080022b5 	.word	0x080022b5
 8001ed0:	08001ef5 	.word	0x08001ef5
 8001ed4:	080022b5 	.word	0x080022b5
 8001ed8:	080022b5 	.word	0x080022b5
 8001edc:	080022b5 	.word	0x080022b5
 8001ee0:	080020e5 	.word	0x080020e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ee4:	4bb9      	ldr	r3, [pc, #740]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001eea:	e1e7      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eec:	4bb8      	ldr	r3, [pc, #736]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001eee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ef2:	e1e3      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ef4:	4bb4      	ldr	r3, [pc, #720]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001efc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f00:	4bb1      	ldr	r3, [pc, #708]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d071      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0c:	4bae      	ldr	r3, [pc, #696]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	099b      	lsrs	r3, r3, #6
 8001f12:	2200      	movs	r2, #0
 8001f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f18:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f32:	4622      	mov	r2, r4
 8001f34:	462b      	mov	r3, r5
 8001f36:	f04f 0000 	mov.w	r0, #0
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	0159      	lsls	r1, r3, #5
 8001f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f44:	0150      	lsls	r0, r2, #5
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	1a51      	subs	r1, r2, r1
 8001f4e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001f50:	4629      	mov	r1, r5
 8001f52:	eb63 0301 	sbc.w	r3, r3, r1
 8001f56:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001f64:	4649      	mov	r1, r9
 8001f66:	018b      	lsls	r3, r1, #6
 8001f68:	4641      	mov	r1, r8
 8001f6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f6e:	4641      	mov	r1, r8
 8001f70:	018a      	lsls	r2, r1, #6
 8001f72:	4641      	mov	r1, r8
 8001f74:	1a51      	subs	r1, r2, r1
 8001f76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f78:	4649      	mov	r1, r9
 8001f7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	00cb      	lsls	r3, r1, #3
 8001f90:	4641      	mov	r1, r8
 8001f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f96:	4641      	mov	r1, r8
 8001f98:	00ca      	lsls	r2, r1, #3
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4622      	mov	r2, r4
 8001fa2:	189b      	adds	r3, r3, r2
 8001fa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fa6:	462b      	mov	r3, r5
 8001fa8:	460a      	mov	r2, r1
 8001faa:	eb42 0303 	adc.w	r3, r2, r3
 8001fae:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fbc:	4629      	mov	r1, r5
 8001fbe:	024b      	lsls	r3, r1, #9
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	024a      	lsls	r2, r1, #9
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001fd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001fdc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001fe0:	f7fe f916 	bl	8000210 <__aeabi_uldivmod>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4613      	mov	r3, r2
 8001fea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fee:	e067      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff0:	4b75      	ldr	r3, [pc, #468]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	099b      	lsrs	r3, r3, #6
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ffc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002000:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002008:	67bb      	str	r3, [r7, #120]	@ 0x78
 800200a:	2300      	movs	r3, #0
 800200c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800200e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002012:	4622      	mov	r2, r4
 8002014:	462b      	mov	r3, r5
 8002016:	f04f 0000 	mov.w	r0, #0
 800201a:	f04f 0100 	mov.w	r1, #0
 800201e:	0159      	lsls	r1, r3, #5
 8002020:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002024:	0150      	lsls	r0, r2, #5
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4621      	mov	r1, r4
 800202c:	1a51      	subs	r1, r2, r1
 800202e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002030:	4629      	mov	r1, r5
 8002032:	eb63 0301 	sbc.w	r3, r3, r1
 8002036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 0300 	mov.w	r3, #0
 8002040:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002044:	4649      	mov	r1, r9
 8002046:	018b      	lsls	r3, r1, #6
 8002048:	4641      	mov	r1, r8
 800204a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800204e:	4641      	mov	r1, r8
 8002050:	018a      	lsls	r2, r1, #6
 8002052:	4641      	mov	r1, r8
 8002054:	ebb2 0a01 	subs.w	sl, r2, r1
 8002058:	4649      	mov	r1, r9
 800205a:	eb63 0b01 	sbc.w	fp, r3, r1
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800206a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800206e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002072:	4692      	mov	sl, r2
 8002074:	469b      	mov	fp, r3
 8002076:	4623      	mov	r3, r4
 8002078:	eb1a 0303 	adds.w	r3, sl, r3
 800207c:	623b      	str	r3, [r7, #32]
 800207e:	462b      	mov	r3, r5
 8002080:	eb4b 0303 	adc.w	r3, fp, r3
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002092:	4629      	mov	r1, r5
 8002094:	028b      	lsls	r3, r1, #10
 8002096:	4621      	mov	r1, r4
 8002098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800209c:	4621      	mov	r1, r4
 800209e:	028a      	lsls	r2, r1, #10
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020a8:	2200      	movs	r2, #0
 80020aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80020ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80020ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80020b2:	f7fe f8ad 	bl	8000210 <__aeabi_uldivmod>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4613      	mov	r3, r2
 80020bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020c0:	4b41      	ldr	r3, [pc, #260]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	0c1b      	lsrs	r3, r3, #16
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	3301      	adds	r3, #1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80020d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80020e2:	e0eb      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e4:	4b38      	ldr	r3, [pc, #224]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020f0:	4b35      	ldr	r3, [pc, #212]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d06b      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fc:	4b32      	ldr	r3, [pc, #200]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	099b      	lsrs	r3, r3, #6
 8002102:	2200      	movs	r2, #0
 8002104:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002106:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002108:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800210a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800210e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002110:	2300      	movs	r3, #0
 8002112:	667b      	str	r3, [r7, #100]	@ 0x64
 8002114:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002118:	4622      	mov	r2, r4
 800211a:	462b      	mov	r3, r5
 800211c:	f04f 0000 	mov.w	r0, #0
 8002120:	f04f 0100 	mov.w	r1, #0
 8002124:	0159      	lsls	r1, r3, #5
 8002126:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800212a:	0150      	lsls	r0, r2, #5
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4621      	mov	r1, r4
 8002132:	1a51      	subs	r1, r2, r1
 8002134:	61b9      	str	r1, [r7, #24]
 8002136:	4629      	mov	r1, r5
 8002138:	eb63 0301 	sbc.w	r3, r3, r1
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800214a:	4659      	mov	r1, fp
 800214c:	018b      	lsls	r3, r1, #6
 800214e:	4651      	mov	r1, sl
 8002150:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002154:	4651      	mov	r1, sl
 8002156:	018a      	lsls	r2, r1, #6
 8002158:	4651      	mov	r1, sl
 800215a:	ebb2 0801 	subs.w	r8, r2, r1
 800215e:	4659      	mov	r1, fp
 8002160:	eb63 0901 	sbc.w	r9, r3, r1
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002170:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002174:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002178:	4690      	mov	r8, r2
 800217a:	4699      	mov	r9, r3
 800217c:	4623      	mov	r3, r4
 800217e:	eb18 0303 	adds.w	r3, r8, r3
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	462b      	mov	r3, r5
 8002186:	eb49 0303 	adc.w	r3, r9, r3
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002198:	4629      	mov	r1, r5
 800219a:	024b      	lsls	r3, r1, #9
 800219c:	4621      	mov	r1, r4
 800219e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021a2:	4621      	mov	r1, r4
 80021a4:	024a      	lsls	r2, r1, #9
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021ae:	2200      	movs	r2, #0
 80021b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80021b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80021b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021b8:	f7fe f82a 	bl	8000210 <__aeabi_uldivmod>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4613      	mov	r3, r2
 80021c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021c6:	e065      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0x420>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	00f42400 	.word	0x00f42400
 80021d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d4:	4b3d      	ldr	r3, [pc, #244]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x458>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	099b      	lsrs	r3, r3, #6
 80021da:	2200      	movs	r2, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	4611      	mov	r1, r2
 80021e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80021e6:	2300      	movs	r3, #0
 80021e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80021ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80021ee:	4642      	mov	r2, r8
 80021f0:	464b      	mov	r3, r9
 80021f2:	f04f 0000 	mov.w	r0, #0
 80021f6:	f04f 0100 	mov.w	r1, #0
 80021fa:	0159      	lsls	r1, r3, #5
 80021fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002200:	0150      	lsls	r0, r2, #5
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4641      	mov	r1, r8
 8002208:	1a51      	subs	r1, r2, r1
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	4649      	mov	r1, r9
 800220e:	eb63 0301 	sbc.w	r3, r3, r1
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002220:	4659      	mov	r1, fp
 8002222:	018b      	lsls	r3, r1, #6
 8002224:	4651      	mov	r1, sl
 8002226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800222a:	4651      	mov	r1, sl
 800222c:	018a      	lsls	r2, r1, #6
 800222e:	4651      	mov	r1, sl
 8002230:	1a54      	subs	r4, r2, r1
 8002232:	4659      	mov	r1, fp
 8002234:	eb63 0501 	sbc.w	r5, r3, r1
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	00eb      	lsls	r3, r5, #3
 8002242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002246:	00e2      	lsls	r2, r4, #3
 8002248:	4614      	mov	r4, r2
 800224a:	461d      	mov	r5, r3
 800224c:	4643      	mov	r3, r8
 800224e:	18e3      	adds	r3, r4, r3
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	464b      	mov	r3, r9
 8002254:	eb45 0303 	adc.w	r3, r5, r3
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002266:	4629      	mov	r1, r5
 8002268:	028b      	lsls	r3, r1, #10
 800226a:	4621      	mov	r1, r4
 800226c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002270:	4621      	mov	r1, r4
 8002272:	028a      	lsls	r2, r1, #10
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800227c:	2200      	movs	r2, #0
 800227e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002280:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002282:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002286:	f7fd ffc3 	bl	8000210 <__aeabi_uldivmod>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4613      	mov	r3, r2
 8002290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002294:	4b0d      	ldr	r3, [pc, #52]	@ (80022cc <HAL_RCC_GetSysClockFreq+0x458>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	0f1b      	lsrs	r3, r3, #28
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80022a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022b2:	e003      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b4:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80022b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	37b8      	adds	r7, #184	@ 0xb8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	00f42400 	.word	0x00f42400

080022d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e28d      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8083 	beq.w	80023fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022f4:	4b94      	ldr	r3, [pc, #592]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d019      	beq.n	8002334 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002300:	4b91      	ldr	r3, [pc, #580]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002308:	2b08      	cmp	r3, #8
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800230c:	4b8e      	ldr	r3, [pc, #568]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002314:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002318:	d00c      	beq.n	8002334 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231a:	4b8b      	ldr	r3, [pc, #556]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002322:	2b0c      	cmp	r3, #12
 8002324:	d112      	bne.n	800234c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002326:	4b88      	ldr	r3, [pc, #544]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800232e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002332:	d10b      	bne.n	800234c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	4b84      	ldr	r3, [pc, #528]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d05b      	beq.n	80023f8 <HAL_RCC_OscConfig+0x124>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d157      	bne.n	80023f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e25a      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002354:	d106      	bne.n	8002364 <HAL_RCC_OscConfig+0x90>
 8002356:	4b7c      	ldr	r3, [pc, #496]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a7b      	ldr	r2, [pc, #492]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e01d      	b.n	80023a0 <HAL_RCC_OscConfig+0xcc>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0xb4>
 800236e:	4b76      	ldr	r3, [pc, #472]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a75      	ldr	r2, [pc, #468]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 8002374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b73      	ldr	r3, [pc, #460]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a72      	ldr	r2, [pc, #456]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e00b      	b.n	80023a0 <HAL_RCC_OscConfig+0xcc>
 8002388:	4b6f      	ldr	r3, [pc, #444]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6e      	ldr	r2, [pc, #440]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 800238e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b6c      	ldr	r3, [pc, #432]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6b      	ldr	r2, [pc, #428]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 800239a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800239e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe fcb6 	bl	8000d18 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b0:	f7fe fcb2 	bl	8000d18 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	@ 0x64
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e21f      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b61      	ldr	r3, [pc, #388]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0xdc>
 80023ce:	e014      	b.n	80023fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fca2 	bl	8000d18 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d8:	f7fe fc9e 	bl	8000d18 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	@ 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e20b      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ea:	4b57      	ldr	r3, [pc, #348]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x104>
 80023f6:	e000      	b.n	80023fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d06f      	beq.n	80024e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002406:	4b50      	ldr	r3, [pc, #320]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b00      	cmp	r3, #0
 8002410:	d017      	beq.n	8002442 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002412:	4b4d      	ldr	r3, [pc, #308]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800241a:	2b08      	cmp	r3, #8
 800241c:	d105      	bne.n	800242a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800241e:	4b4a      	ldr	r3, [pc, #296]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242a:	4b47      	ldr	r3, [pc, #284]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002432:	2b0c      	cmp	r3, #12
 8002434:	d11c      	bne.n	8002470 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002436:	4b44      	ldr	r3, [pc, #272]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d116      	bne.n	8002470 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002442:	4b41      	ldr	r3, [pc, #260]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_RCC_OscConfig+0x186>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e1d3      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245a:	4b3b      	ldr	r3, [pc, #236]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4937      	ldr	r1, [pc, #220]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	e03a      	b.n	80024e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d020      	beq.n	80024ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002478:	4b34      	ldr	r3, [pc, #208]	@ (800254c <HAL_RCC_OscConfig+0x278>)
 800247a:	2201      	movs	r2, #1
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247e:	f7fe fc4b 	bl	8000d18 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002486:	f7fe fc47 	bl	8000d18 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e1b4      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002498:	4b2b      	ldr	r3, [pc, #172]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a4:	4b28      	ldr	r3, [pc, #160]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4925      	ldr	r1, [pc, #148]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
 80024b8:	e015      	b.n	80024e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ba:	4b24      	ldr	r3, [pc, #144]	@ (800254c <HAL_RCC_OscConfig+0x278>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe fc2a 	bl	8000d18 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c8:	f7fe fc26 	bl	8000d18 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e193      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024da:	4b1b      	ldr	r3, [pc, #108]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d036      	beq.n	8002560 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d016      	beq.n	8002528 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fa:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <HAL_RCC_OscConfig+0x27c>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002500:	f7fe fc0a 	bl	8000d18 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002508:	f7fe fc06 	bl	8000d18 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e173      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251a:	4b0b      	ldr	r3, [pc, #44]	@ (8002548 <HAL_RCC_OscConfig+0x274>)
 800251c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x234>
 8002526:	e01b      	b.n	8002560 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002528:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_RCC_OscConfig+0x27c>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252e:	f7fe fbf3 	bl	8000d18 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002534:	e00e      	b.n	8002554 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002536:	f7fe fbef 	bl	8000d18 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d907      	bls.n	8002554 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e15c      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
 8002548:	40023800 	.word	0x40023800
 800254c:	42470000 	.word	0x42470000
 8002550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002554:	4b8a      	ldr	r3, [pc, #552]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1ea      	bne.n	8002536 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 8097 	beq.w	800269c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002572:	4b83      	ldr	r3, [pc, #524]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10f      	bne.n	800259e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	4b7f      	ldr	r3, [pc, #508]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	4a7e      	ldr	r2, [pc, #504]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800258c:	6413      	str	r3, [r2, #64]	@ 0x40
 800258e:	4b7c      	ldr	r3, [pc, #496]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259a:	2301      	movs	r3, #1
 800259c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259e:	4b79      	ldr	r3, [pc, #484]	@ (8002784 <HAL_RCC_OscConfig+0x4b0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d118      	bne.n	80025dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025aa:	4b76      	ldr	r3, [pc, #472]	@ (8002784 <HAL_RCC_OscConfig+0x4b0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a75      	ldr	r2, [pc, #468]	@ (8002784 <HAL_RCC_OscConfig+0x4b0>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b6:	f7fe fbaf 	bl	8000d18 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025be:	f7fe fbab 	bl	8000d18 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e118      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002784 <HAL_RCC_OscConfig+0x4b0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x31e>
 80025e4:	4b66      	ldr	r3, [pc, #408]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e8:	4a65      	ldr	r2, [pc, #404]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f0:	e01c      	b.n	800262c <HAL_RCC_OscConfig+0x358>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b05      	cmp	r3, #5
 80025f8:	d10c      	bne.n	8002614 <HAL_RCC_OscConfig+0x340>
 80025fa:	4b61      	ldr	r3, [pc, #388]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fe:	4a60      	ldr	r2, [pc, #384]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	6713      	str	r3, [r2, #112]	@ 0x70
 8002606:	4b5e      	ldr	r3, [pc, #376]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260a:	4a5d      	ldr	r2, [pc, #372]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6713      	str	r3, [r2, #112]	@ 0x70
 8002612:	e00b      	b.n	800262c <HAL_RCC_OscConfig+0x358>
 8002614:	4b5a      	ldr	r3, [pc, #360]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002618:	4a59      	ldr	r2, [pc, #356]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002620:	4b57      	ldr	r3, [pc, #348]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002624:	4a56      	ldr	r2, [pc, #344]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002626:	f023 0304 	bic.w	r3, r3, #4
 800262a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d015      	beq.n	8002660 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7fe fb70 	bl	8000d18 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263a:	e00a      	b.n	8002652 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800263c:	f7fe fb6c 	bl	8000d18 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e0d7      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002652:	4b4b      	ldr	r3, [pc, #300]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0ee      	beq.n	800263c <HAL_RCC_OscConfig+0x368>
 800265e:	e014      	b.n	800268a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002660:	f7fe fb5a 	bl	8000d18 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002666:	e00a      	b.n	800267e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002668:	f7fe fb56 	bl	8000d18 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e0c1      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267e:	4b40      	ldr	r3, [pc, #256]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1ee      	bne.n	8002668 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800268a:	7dfb      	ldrb	r3, [r7, #23]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002690:	4b3b      	ldr	r3, [pc, #236]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	4a3a      	ldr	r2, [pc, #232]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002696:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800269a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80ad 	beq.w	8002800 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026a6:	4b36      	ldr	r3, [pc, #216]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d060      	beq.n	8002774 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d145      	bne.n	8002746 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ba:	4b33      	ldr	r3, [pc, #204]	@ (8002788 <HAL_RCC_OscConfig+0x4b4>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fb2a 	bl	8000d18 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe fb26 	bl	8000d18 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e093      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	4b29      	ldr	r3, [pc, #164]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69da      	ldr	r2, [r3, #28]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	019b      	lsls	r3, r3, #6
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	3b01      	subs	r3, #1
 8002700:	041b      	lsls	r3, r3, #16
 8002702:	431a      	orrs	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	071b      	lsls	r3, r3, #28
 8002712:	491b      	ldr	r1, [pc, #108]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002718:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <HAL_RCC_OscConfig+0x4b4>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271e:	f7fe fafb 	bl	8000d18 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002726:	f7fe faf7 	bl	8000d18 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e064      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002738:	4b11      	ldr	r3, [pc, #68]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x452>
 8002744:	e05c      	b.n	8002800 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002746:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <HAL_RCC_OscConfig+0x4b4>)
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fe fae4 	bl	8000d18 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe fae0 	bl	8000d18 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e04d      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002766:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_RCC_OscConfig+0x4ac>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x480>
 8002772:	e045      	b.n	8002800 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d107      	bne.n	800278c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e040      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
 8002780:	40023800 	.word	0x40023800
 8002784:	40007000 	.word	0x40007000
 8002788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800278c:	4b1f      	ldr	r3, [pc, #124]	@ (800280c <HAL_RCC_OscConfig+0x538>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d030      	beq.n	80027fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d129      	bne.n	80027fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d122      	bne.n	80027fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80027bc:	4013      	ands	r3, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80027c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d119      	bne.n	80027fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d2:	085b      	lsrs	r3, r3, #1
 80027d4:	3b01      	subs	r3, #1
 80027d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d8:	429a      	cmp	r2, r3
 80027da:	d10f      	bne.n	80027fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d107      	bne.n	80027fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800

08002810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e041      	b.n	80028a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f839 	bl	80028ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3304      	adds	r3, #4
 800284c:	4619      	mov	r1, r3
 800284e:	4610      	mov	r0, r2
 8002850:	f000 f9c0 	bl	8002bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d001      	beq.n	80028dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e04e      	b.n	800297a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a23      	ldr	r2, [pc, #140]	@ (8002988 <HAL_TIM_Base_Start_IT+0xc4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d022      	beq.n	8002944 <HAL_TIM_Base_Start_IT+0x80>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002906:	d01d      	beq.n	8002944 <HAL_TIM_Base_Start_IT+0x80>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1f      	ldr	r2, [pc, #124]	@ (800298c <HAL_TIM_Base_Start_IT+0xc8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d018      	beq.n	8002944 <HAL_TIM_Base_Start_IT+0x80>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1e      	ldr	r2, [pc, #120]	@ (8002990 <HAL_TIM_Base_Start_IT+0xcc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d013      	beq.n	8002944 <HAL_TIM_Base_Start_IT+0x80>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1c      	ldr	r2, [pc, #112]	@ (8002994 <HAL_TIM_Base_Start_IT+0xd0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00e      	beq.n	8002944 <HAL_TIM_Base_Start_IT+0x80>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1b      	ldr	r2, [pc, #108]	@ (8002998 <HAL_TIM_Base_Start_IT+0xd4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d009      	beq.n	8002944 <HAL_TIM_Base_Start_IT+0x80>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a19      	ldr	r2, [pc, #100]	@ (800299c <HAL_TIM_Base_Start_IT+0xd8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d004      	beq.n	8002944 <HAL_TIM_Base_Start_IT+0x80>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a18      	ldr	r2, [pc, #96]	@ (80029a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d111      	bne.n	8002968 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b06      	cmp	r3, #6
 8002954:	d010      	beq.n	8002978 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0201 	orr.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002966:	e007      	b.n	8002978 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40010000 	.word	0x40010000
 800298c:	40000400 	.word	0x40000400
 8002990:	40000800 	.word	0x40000800
 8002994:	40000c00 	.word	0x40000c00
 8002998:	40010400 	.word	0x40010400
 800299c:	40014000 	.word	0x40014000
 80029a0:	40001800 	.word	0x40001800

080029a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d020      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01b      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0202 	mvn.w	r2, #2
 80029d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f8d2 	bl	8002b98 <HAL_TIM_IC_CaptureCallback>
 80029f4:	e005      	b.n	8002a02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f8c4 	bl	8002b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f8d5 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d020      	beq.n	8002a54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01b      	beq.n	8002a54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0204 	mvn.w	r2, #4
 8002a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8ac 	bl	8002b98 <HAL_TIM_IC_CaptureCallback>
 8002a40:	e005      	b.n	8002a4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f89e 	bl	8002b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f8af 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d020      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d01b      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0208 	mvn.w	r2, #8
 8002a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2204      	movs	r2, #4
 8002a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f886 	bl	8002b98 <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f878 	bl	8002b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f889 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d020      	beq.n	8002aec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0210 	mvn.w	r2, #16
 8002abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2208      	movs	r2, #8
 8002ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f860 	bl	8002b98 <HAL_TIM_IC_CaptureCallback>
 8002ad8:	e005      	b.n	8002ae6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f852 	bl	8002b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f863 	bl	8002bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00c      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0201 	mvn.w	r2, #1
 8002b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fd feec 	bl	80008e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00c      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f906 	bl	8002d40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00c      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d007      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f834 	bl	8002bc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00c      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0220 	mvn.w	r2, #32
 8002b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f8d8 	bl	8002d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a46      	ldr	r2, [pc, #280]	@ (8002d00 <TIM_Base_SetConfig+0x12c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <TIM_Base_SetConfig+0x40>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf2:	d00f      	beq.n	8002c14 <TIM_Base_SetConfig+0x40>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a43      	ldr	r2, [pc, #268]	@ (8002d04 <TIM_Base_SetConfig+0x130>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00b      	beq.n	8002c14 <TIM_Base_SetConfig+0x40>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a42      	ldr	r2, [pc, #264]	@ (8002d08 <TIM_Base_SetConfig+0x134>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d007      	beq.n	8002c14 <TIM_Base_SetConfig+0x40>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a41      	ldr	r2, [pc, #260]	@ (8002d0c <TIM_Base_SetConfig+0x138>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d003      	beq.n	8002c14 <TIM_Base_SetConfig+0x40>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a40      	ldr	r2, [pc, #256]	@ (8002d10 <TIM_Base_SetConfig+0x13c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d108      	bne.n	8002c26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a35      	ldr	r2, [pc, #212]	@ (8002d00 <TIM_Base_SetConfig+0x12c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d02b      	beq.n	8002c86 <TIM_Base_SetConfig+0xb2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c34:	d027      	beq.n	8002c86 <TIM_Base_SetConfig+0xb2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a32      	ldr	r2, [pc, #200]	@ (8002d04 <TIM_Base_SetConfig+0x130>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d023      	beq.n	8002c86 <TIM_Base_SetConfig+0xb2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a31      	ldr	r2, [pc, #196]	@ (8002d08 <TIM_Base_SetConfig+0x134>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01f      	beq.n	8002c86 <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a30      	ldr	r2, [pc, #192]	@ (8002d0c <TIM_Base_SetConfig+0x138>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01b      	beq.n	8002c86 <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a2f      	ldr	r2, [pc, #188]	@ (8002d10 <TIM_Base_SetConfig+0x13c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d017      	beq.n	8002c86 <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a2e      	ldr	r2, [pc, #184]	@ (8002d14 <TIM_Base_SetConfig+0x140>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a2d      	ldr	r2, [pc, #180]	@ (8002d18 <TIM_Base_SetConfig+0x144>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00f      	beq.n	8002c86 <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a2c      	ldr	r2, [pc, #176]	@ (8002d1c <TIM_Base_SetConfig+0x148>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00b      	beq.n	8002c86 <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a2b      	ldr	r2, [pc, #172]	@ (8002d20 <TIM_Base_SetConfig+0x14c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a2a      	ldr	r2, [pc, #168]	@ (8002d24 <TIM_Base_SetConfig+0x150>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a29      	ldr	r2, [pc, #164]	@ (8002d28 <TIM_Base_SetConfig+0x154>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d108      	bne.n	8002c98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a10      	ldr	r2, [pc, #64]	@ (8002d00 <TIM_Base_SetConfig+0x12c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <TIM_Base_SetConfig+0xf8>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a12      	ldr	r2, [pc, #72]	@ (8002d10 <TIM_Base_SetConfig+0x13c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d103      	bne.n	8002cd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d105      	bne.n	8002cf2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f023 0201 	bic.w	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	611a      	str	r2, [r3, #16]
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40010000 	.word	0x40010000
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40000800 	.word	0x40000800
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	40010400 	.word	0x40010400
 8002d14:	40014000 	.word	0x40014000
 8002d18:	40014400 	.word	0x40014400
 8002d1c:	40014800 	.word	0x40014800
 8002d20:	40001800 	.word	0x40001800
 8002d24:	40001c00 	.word	0x40001c00
 8002d28:	40002000 	.word	0x40002000

08002d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e042      	b.n	8002dec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fd fdf8 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2224      	movs	r2, #36	@ 0x24
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f82b 	bl	8002df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df8:	b0c0      	sub	sp, #256	@ 0x100
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e10:	68d9      	ldr	r1, [r3, #12]
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	ea40 0301 	orr.w	r3, r0, r1
 8002e1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e4c:	f021 010c 	bic.w	r1, r1, #12
 8002e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6e:	6999      	ldr	r1, [r3, #24]
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	ea40 0301 	orr.w	r3, r0, r1
 8002e7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b8f      	ldr	r3, [pc, #572]	@ (80030c0 <UART_SetConfig+0x2cc>)
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d005      	beq.n	8002e94 <UART_SetConfig+0xa0>
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b8d      	ldr	r3, [pc, #564]	@ (80030c4 <UART_SetConfig+0x2d0>)
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d104      	bne.n	8002e9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e94:	f7fe fc7e 	bl	8001794 <HAL_RCC_GetPCLK2Freq>
 8002e98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e9c:	e003      	b.n	8002ea6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e9e:	f7fe fc65 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 8002ea2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eb0:	f040 810c 	bne.w	80030cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ebe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002ec2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002ec6:	4622      	mov	r2, r4
 8002ec8:	462b      	mov	r3, r5
 8002eca:	1891      	adds	r1, r2, r2
 8002ecc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ece:	415b      	adcs	r3, r3
 8002ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ed2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ed6:	4621      	mov	r1, r4
 8002ed8:	eb12 0801 	adds.w	r8, r2, r1
 8002edc:	4629      	mov	r1, r5
 8002ede:	eb43 0901 	adc.w	r9, r3, r1
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ef6:	4690      	mov	r8, r2
 8002ef8:	4699      	mov	r9, r3
 8002efa:	4623      	mov	r3, r4
 8002efc:	eb18 0303 	adds.w	r3, r8, r3
 8002f00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f04:	462b      	mov	r3, r5
 8002f06:	eb49 0303 	adc.w	r3, r9, r3
 8002f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f22:	460b      	mov	r3, r1
 8002f24:	18db      	adds	r3, r3, r3
 8002f26:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f28:	4613      	mov	r3, r2
 8002f2a:	eb42 0303 	adc.w	r3, r2, r3
 8002f2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f38:	f7fd f96a 	bl	8000210 <__aeabi_uldivmod>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4b61      	ldr	r3, [pc, #388]	@ (80030c8 <UART_SetConfig+0x2d4>)
 8002f42:	fba3 2302 	umull	r2, r3, r3, r2
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	011c      	lsls	r4, r3, #4
 8002f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f5c:	4642      	mov	r2, r8
 8002f5e:	464b      	mov	r3, r9
 8002f60:	1891      	adds	r1, r2, r2
 8002f62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f64:	415b      	adcs	r3, r3
 8002f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	eb12 0a01 	adds.w	sl, r2, r1
 8002f72:	4649      	mov	r1, r9
 8002f74:	eb43 0b01 	adc.w	fp, r3, r1
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f8c:	4692      	mov	sl, r2
 8002f8e:	469b      	mov	fp, r3
 8002f90:	4643      	mov	r3, r8
 8002f92:	eb1a 0303 	adds.w	r3, sl, r3
 8002f96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	eb4b 0303 	adc.w	r3, fp, r3
 8002fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	18db      	adds	r3, r3, r3
 8002fbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	eb42 0303 	adc.w	r3, r2, r3
 8002fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fce:	f7fd f91f 	bl	8000210 <__aeabi_uldivmod>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80030c8 <UART_SetConfig+0x2d4>)
 8002fda:	fba3 2301 	umull	r2, r3, r3, r1
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	2264      	movs	r2, #100	@ 0x64
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	1acb      	subs	r3, r1, r3
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002fee:	4b36      	ldr	r3, [pc, #216]	@ (80030c8 <UART_SetConfig+0x2d4>)
 8002ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ffc:	441c      	add	r4, r3
 8002ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003002:	2200      	movs	r2, #0
 8003004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003008:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800300c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003010:	4642      	mov	r2, r8
 8003012:	464b      	mov	r3, r9
 8003014:	1891      	adds	r1, r2, r2
 8003016:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003018:	415b      	adcs	r3, r3
 800301a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800301c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003020:	4641      	mov	r1, r8
 8003022:	1851      	adds	r1, r2, r1
 8003024:	6339      	str	r1, [r7, #48]	@ 0x30
 8003026:	4649      	mov	r1, r9
 8003028:	414b      	adcs	r3, r1
 800302a:	637b      	str	r3, [r7, #52]	@ 0x34
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003038:	4659      	mov	r1, fp
 800303a:	00cb      	lsls	r3, r1, #3
 800303c:	4651      	mov	r1, sl
 800303e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003042:	4651      	mov	r1, sl
 8003044:	00ca      	lsls	r2, r1, #3
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	4603      	mov	r3, r0
 800304c:	4642      	mov	r2, r8
 800304e:	189b      	adds	r3, r3, r2
 8003050:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003054:	464b      	mov	r3, r9
 8003056:	460a      	mov	r2, r1
 8003058:	eb42 0303 	adc.w	r3, r2, r3
 800305c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800306c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003074:	460b      	mov	r3, r1
 8003076:	18db      	adds	r3, r3, r3
 8003078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800307a:	4613      	mov	r3, r2
 800307c:	eb42 0303 	adc.w	r3, r2, r3
 8003080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003086:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800308a:	f7fd f8c1 	bl	8000210 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4b0d      	ldr	r3, [pc, #52]	@ (80030c8 <UART_SetConfig+0x2d4>)
 8003094:	fba3 1302 	umull	r1, r3, r3, r2
 8003098:	095b      	lsrs	r3, r3, #5
 800309a:	2164      	movs	r1, #100	@ 0x64
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	3332      	adds	r3, #50	@ 0x32
 80030a6:	4a08      	ldr	r2, [pc, #32]	@ (80030c8 <UART_SetConfig+0x2d4>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	f003 0207 	and.w	r2, r3, #7
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4422      	add	r2, r4
 80030ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030bc:	e106      	b.n	80032cc <UART_SetConfig+0x4d8>
 80030be:	bf00      	nop
 80030c0:	40011000 	.word	0x40011000
 80030c4:	40011400 	.word	0x40011400
 80030c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030d0:	2200      	movs	r2, #0
 80030d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030de:	4642      	mov	r2, r8
 80030e0:	464b      	mov	r3, r9
 80030e2:	1891      	adds	r1, r2, r2
 80030e4:	6239      	str	r1, [r7, #32]
 80030e6:	415b      	adcs	r3, r3
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030ee:	4641      	mov	r1, r8
 80030f0:	1854      	adds	r4, r2, r1
 80030f2:	4649      	mov	r1, r9
 80030f4:	eb43 0501 	adc.w	r5, r3, r1
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	00eb      	lsls	r3, r5, #3
 8003102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003106:	00e2      	lsls	r2, r4, #3
 8003108:	4614      	mov	r4, r2
 800310a:	461d      	mov	r5, r3
 800310c:	4643      	mov	r3, r8
 800310e:	18e3      	adds	r3, r4, r3
 8003110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003114:	464b      	mov	r3, r9
 8003116:	eb45 0303 	adc.w	r3, r5, r3
 800311a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800312a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800313a:	4629      	mov	r1, r5
 800313c:	008b      	lsls	r3, r1, #2
 800313e:	4621      	mov	r1, r4
 8003140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003144:	4621      	mov	r1, r4
 8003146:	008a      	lsls	r2, r1, #2
 8003148:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800314c:	f7fd f860 	bl	8000210 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4b60      	ldr	r3, [pc, #384]	@ (80032d8 <UART_SetConfig+0x4e4>)
 8003156:	fba3 2302 	umull	r2, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	011c      	lsls	r4, r3, #4
 800315e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003162:	2200      	movs	r2, #0
 8003164:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003168:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800316c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003170:	4642      	mov	r2, r8
 8003172:	464b      	mov	r3, r9
 8003174:	1891      	adds	r1, r2, r2
 8003176:	61b9      	str	r1, [r7, #24]
 8003178:	415b      	adcs	r3, r3
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003180:	4641      	mov	r1, r8
 8003182:	1851      	adds	r1, r2, r1
 8003184:	6139      	str	r1, [r7, #16]
 8003186:	4649      	mov	r1, r9
 8003188:	414b      	adcs	r3, r1
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003198:	4659      	mov	r1, fp
 800319a:	00cb      	lsls	r3, r1, #3
 800319c:	4651      	mov	r1, sl
 800319e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031a2:	4651      	mov	r1, sl
 80031a4:	00ca      	lsls	r2, r1, #3
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	4603      	mov	r3, r0
 80031ac:	4642      	mov	r2, r8
 80031ae:	189b      	adds	r3, r3, r2
 80031b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031b4:	464b      	mov	r3, r9
 80031b6:	460a      	mov	r2, r1
 80031b8:	eb42 0303 	adc.w	r3, r2, r3
 80031bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031d8:	4649      	mov	r1, r9
 80031da:	008b      	lsls	r3, r1, #2
 80031dc:	4641      	mov	r1, r8
 80031de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031e2:	4641      	mov	r1, r8
 80031e4:	008a      	lsls	r2, r1, #2
 80031e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031ea:	f7fd f811 	bl	8000210 <__aeabi_uldivmod>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4611      	mov	r1, r2
 80031f4:	4b38      	ldr	r3, [pc, #224]	@ (80032d8 <UART_SetConfig+0x4e4>)
 80031f6:	fba3 2301 	umull	r2, r3, r3, r1
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2264      	movs	r2, #100	@ 0x64
 80031fe:	fb02 f303 	mul.w	r3, r2, r3
 8003202:	1acb      	subs	r3, r1, r3
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	3332      	adds	r3, #50	@ 0x32
 8003208:	4a33      	ldr	r2, [pc, #204]	@ (80032d8 <UART_SetConfig+0x4e4>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003214:	441c      	add	r4, r3
 8003216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800321a:	2200      	movs	r2, #0
 800321c:	673b      	str	r3, [r7, #112]	@ 0x70
 800321e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003220:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003224:	4642      	mov	r2, r8
 8003226:	464b      	mov	r3, r9
 8003228:	1891      	adds	r1, r2, r2
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	415b      	adcs	r3, r3
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003234:	4641      	mov	r1, r8
 8003236:	1851      	adds	r1, r2, r1
 8003238:	6039      	str	r1, [r7, #0]
 800323a:	4649      	mov	r1, r9
 800323c:	414b      	adcs	r3, r1
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800324c:	4659      	mov	r1, fp
 800324e:	00cb      	lsls	r3, r1, #3
 8003250:	4651      	mov	r1, sl
 8003252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003256:	4651      	mov	r1, sl
 8003258:	00ca      	lsls	r2, r1, #3
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	4603      	mov	r3, r0
 8003260:	4642      	mov	r2, r8
 8003262:	189b      	adds	r3, r3, r2
 8003264:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003266:	464b      	mov	r3, r9
 8003268:	460a      	mov	r2, r1
 800326a:	eb42 0303 	adc.w	r3, r2, r3
 800326e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	663b      	str	r3, [r7, #96]	@ 0x60
 800327a:	667a      	str	r2, [r7, #100]	@ 0x64
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003288:	4649      	mov	r1, r9
 800328a:	008b      	lsls	r3, r1, #2
 800328c:	4641      	mov	r1, r8
 800328e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003292:	4641      	mov	r1, r8
 8003294:	008a      	lsls	r2, r1, #2
 8003296:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800329a:	f7fc ffb9 	bl	8000210 <__aeabi_uldivmod>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4b0d      	ldr	r3, [pc, #52]	@ (80032d8 <UART_SetConfig+0x4e4>)
 80032a4:	fba3 1302 	umull	r1, r3, r3, r2
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	2164      	movs	r1, #100	@ 0x64
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	3332      	adds	r3, #50	@ 0x32
 80032b6:	4a08      	ldr	r2, [pc, #32]	@ (80032d8 <UART_SetConfig+0x4e4>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	f003 020f 	and.w	r2, r3, #15
 80032c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4422      	add	r2, r4
 80032ca:	609a      	str	r2, [r3, #8]
}
 80032cc:	bf00      	nop
 80032ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032d2:	46bd      	mov	sp, r7
 80032d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032d8:	51eb851f 	.word	0x51eb851f

080032dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032dc:	b084      	sub	sp, #16
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	f107 001c 	add.w	r0, r7, #28
 80032ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d123      	bne.n	800333e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800330a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800331e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003322:	2b01      	cmp	r3, #1
 8003324:	d105      	bne.n	8003332 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fa9a 	bl	800386c <USB_CoreReset>
 8003338:	4603      	mov	r3, r0
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e01b      	b.n	8003376 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fa8e 	bl	800386c <USB_CoreReset>
 8003350:	4603      	mov	r3, r0
 8003352:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003354:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003358:	2b00      	cmp	r3, #0
 800335a:	d106      	bne.n	800336a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	639a      	str	r2, [r3, #56]	@ 0x38
 8003368:	e005      	b.n	8003376 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003376:	7fbb      	ldrb	r3, [r7, #30]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d10b      	bne.n	8003394 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f043 0206 	orr.w	r2, r3, #6
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033a0:	b004      	add	sp, #16
 80033a2:	4770      	bx	lr

080033a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f023 0201 	bic.w	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	460b      	mov	r3, r1
 80033d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d115      	bne.n	8003414 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80033f4:	200a      	movs	r0, #10
 80033f6:	f7fd fc9b 	bl	8000d30 <HAL_Delay>
      ms += 10U;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	330a      	adds	r3, #10
 80033fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fa25 	bl	8003850 <USB_GetMode>
 8003406:	4603      	mov	r3, r0
 8003408:	2b01      	cmp	r3, #1
 800340a:	d01e      	beq.n	800344a <USB_SetCurrentMode+0x84>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003410:	d9f0      	bls.n	80033f4 <USB_SetCurrentMode+0x2e>
 8003412:	e01a      	b.n	800344a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d115      	bne.n	8003446 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003426:	200a      	movs	r0, #10
 8003428:	f7fd fc82 	bl	8000d30 <HAL_Delay>
      ms += 10U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	330a      	adds	r3, #10
 8003430:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fa0c 	bl	8003850 <USB_GetMode>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <USB_SetCurrentMode+0x84>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2bc7      	cmp	r3, #199	@ 0xc7
 8003442:	d9f0      	bls.n	8003426 <USB_SetCurrentMode+0x60>
 8003444:	e001      	b.n	800344a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e005      	b.n	8003456 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2bc8      	cmp	r3, #200	@ 0xc8
 800344e:	d101      	bne.n	8003454 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003460:	b084      	sub	sp, #16
 8003462:	b580      	push	{r7, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800346e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	e009      	b.n	8003494 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	3340      	adds	r3, #64	@ 0x40
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	2200      	movs	r2, #0
 800348c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	3301      	adds	r3, #1
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b0e      	cmp	r3, #14
 8003498:	d9f2      	bls.n	8003480 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800349a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d11c      	bne.n	80034dc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e005      	b.n	80034e8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80034ee:	461a      	mov	r2, r3
 80034f0:	2300      	movs	r3, #0
 80034f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10d      	bne.n	8003518 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80034fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003500:	2b00      	cmp	r3, #0
 8003502:	d104      	bne.n	800350e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003504:	2100      	movs	r1, #0
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f968 	bl	80037dc <USB_SetDevSpeed>
 800350c:	e008      	b.n	8003520 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800350e:	2101      	movs	r1, #1
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f963 	bl	80037dc <USB_SetDevSpeed>
 8003516:	e003      	b.n	8003520 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003518:	2103      	movs	r1, #3
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f95e 	bl	80037dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003520:	2110      	movs	r1, #16
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f8fa 	bl	800371c <USB_FlushTxFifo>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f924 	bl	8003780 <USB_FlushRxFifo>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003548:	461a      	mov	r2, r3
 800354a:	2300      	movs	r3, #0
 800354c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003554:	461a      	mov	r2, r3
 8003556:	2300      	movs	r3, #0
 8003558:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003560:	461a      	mov	r2, r3
 8003562:	2300      	movs	r3, #0
 8003564:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	e043      	b.n	80035f4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800357e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003582:	d118      	bne.n	80035b6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003596:	461a      	mov	r2, r3
 8003598:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e013      	b.n	80035c8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ac:	461a      	mov	r2, r3
 80035ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	e008      	b.n	80035c8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	015a      	lsls	r2, r3, #5
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4413      	add	r3, r2
 80035be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035c2:	461a      	mov	r2, r3
 80035c4:	2300      	movs	r3, #0
 80035c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d4:	461a      	mov	r2, r3
 80035d6:	2300      	movs	r3, #0
 80035d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e6:	461a      	mov	r2, r3
 80035e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	3301      	adds	r3, #1
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80035f8:	461a      	mov	r2, r3
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d3b5      	bcc.n	800356c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	e043      	b.n	800368e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003618:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800361c:	d118      	bne.n	8003650 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003630:	461a      	mov	r2, r3
 8003632:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	e013      	b.n	8003662 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003646:	461a      	mov	r2, r3
 8003648:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	e008      	b.n	8003662 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800365c:	461a      	mov	r2, r3
 800365e:	2300      	movs	r3, #0
 8003660:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800366e:	461a      	mov	r2, r3
 8003670:	2300      	movs	r3, #0
 8003672:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003680:	461a      	mov	r2, r3
 8003682:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003686:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	3301      	adds	r3, #1
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003692:	461a      	mov	r2, r3
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4293      	cmp	r3, r2
 8003698:	d3b5      	bcc.n	8003606 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80036ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80036bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d105      	bne.n	80036d0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	f043 0210 	orr.w	r2, r3, #16
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	4b10      	ldr	r3, [pc, #64]	@ (8003718 <USB_DevInit+0x2b8>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f043 0208 	orr.w	r2, r3, #8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80036f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d107      	bne.n	8003708 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003700:	f043 0304 	orr.w	r3, r3, #4
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003708:	7dfb      	ldrb	r3, [r7, #23]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003714:	b004      	add	sp, #16
 8003716:	4770      	bx	lr
 8003718:	803c3800 	.word	0x803c3800

0800371c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3301      	adds	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003736:	d901      	bls.n	800373c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e01b      	b.n	8003774 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	daf2      	bge.n	800372a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	019b      	lsls	r3, r3, #6
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3301      	adds	r3, #1
 8003758:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003760:	d901      	bls.n	8003766 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e006      	b.n	8003774 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b20      	cmp	r3, #32
 8003770:	d0f0      	beq.n	8003754 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3301      	adds	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003798:	d901      	bls.n	800379e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e018      	b.n	80037d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	daf2      	bge.n	800378c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2210      	movs	r2, #16
 80037ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	3301      	adds	r3, #1
 80037b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037bc:	d901      	bls.n	80037c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e006      	b.n	80037d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b10      	cmp	r3, #16
 80037cc:	d0f0      	beq.n	80037b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	68f9      	ldr	r1, [r7, #12]
 80037f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003828:	f023 0303 	bic.w	r3, r3, #3
 800382c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800383c:	f043 0302 	orr.w	r3, r3, #2
 8003840:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f003 0301 	and.w	r3, r3, #1
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3301      	adds	r3, #1
 800387c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003884:	d901      	bls.n	800388a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e01b      	b.n	80038c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	daf2      	bge.n	8003878 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f043 0201 	orr.w	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3301      	adds	r3, #1
 80038a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80038ae:	d901      	bls.n	80038b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e006      	b.n	80038c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d0f0      	beq.n	80038a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <__NVIC_SetPriority>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	db0a      	blt.n	80038fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	490c      	ldr	r1, [pc, #48]	@ (800391c <__NVIC_SetPriority+0x4c>)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	0112      	lsls	r2, r2, #4
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	440b      	add	r3, r1
 80038f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80038f8:	e00a      	b.n	8003910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	4908      	ldr	r1, [pc, #32]	@ (8003920 <__NVIC_SetPriority+0x50>)
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	3b04      	subs	r3, #4
 8003908:	0112      	lsls	r2, r2, #4
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	440b      	add	r3, r1
 800390e:	761a      	strb	r2, [r3, #24]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000e100 	.word	0xe000e100
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003928:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <SysTick_Handler+0x1c>)
 800392a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800392c:	f001 fd18 	bl	8005360 <xTaskGetSchedulerState>
 8003930:	4603      	mov	r3, r0
 8003932:	2b01      	cmp	r3, #1
 8003934:	d001      	beq.n	800393a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003936:	f002 fb0f 	bl	8005f58 <xPortSysTickHandler>
  }
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000e010 	.word	0xe000e010

08003944 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003948:	2100      	movs	r1, #0
 800394a:	f06f 0004 	mvn.w	r0, #4
 800394e:	f7ff ffbf 	bl	80038d0 <__NVIC_SetPriority>
#endif
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800395e:	f3ef 8305 	mrs	r3, IPSR
 8003962:	603b      	str	r3, [r7, #0]
  return(result);
 8003964:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800396a:	f06f 0305 	mvn.w	r3, #5
 800396e:	607b      	str	r3, [r7, #4]
 8003970:	e00c      	b.n	800398c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003972:	4b0a      	ldr	r3, [pc, #40]	@ (800399c <osKernelInitialize+0x44>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d105      	bne.n	8003986 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800397a:	4b08      	ldr	r3, [pc, #32]	@ (800399c <osKernelInitialize+0x44>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003980:	2300      	movs	r3, #0
 8003982:	607b      	str	r3, [r7, #4]
 8003984:	e002      	b.n	800398c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003986:	f04f 33ff 	mov.w	r3, #4294967295
 800398a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800398c:	687b      	ldr	r3, [r7, #4]
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	200005a8 	.word	0x200005a8

080039a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039a6:	f3ef 8305 	mrs	r3, IPSR
 80039aa:	603b      	str	r3, [r7, #0]
  return(result);
 80039ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80039b2:	f06f 0305 	mvn.w	r3, #5
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	e010      	b.n	80039dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80039ba:	4b0b      	ldr	r3, [pc, #44]	@ (80039e8 <osKernelStart+0x48>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d109      	bne.n	80039d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039c2:	f7ff ffbf 	bl	8003944 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039c6:	4b08      	ldr	r3, [pc, #32]	@ (80039e8 <osKernelStart+0x48>)
 80039c8:	2202      	movs	r2, #2
 80039ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039cc:	f001 f87a 	bl	8004ac4 <vTaskStartScheduler>
      stat = osOK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	607b      	str	r3, [r7, #4]
 80039d4:	e002      	b.n	80039dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80039d6:	f04f 33ff 	mov.w	r3, #4294967295
 80039da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039dc:	687b      	ldr	r3, [r7, #4]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200005a8 	.word	0x200005a8

080039ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08e      	sub	sp, #56	@ 0x38
 80039f0:	af04      	add	r7, sp, #16
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039fc:	f3ef 8305 	mrs	r3, IPSR
 8003a00:	617b      	str	r3, [r7, #20]
  return(result);
 8003a02:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d17e      	bne.n	8003b06 <osThreadNew+0x11a>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d07b      	beq.n	8003b06 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a0e:	2380      	movs	r3, #128	@ 0x80
 8003a10:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a12:	2318      	movs	r3, #24
 8003a14:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d045      	beq.n	8003ab2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <osThreadNew+0x48>
        name = attr->name;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <osThreadNew+0x6e>
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	2b38      	cmp	r3, #56	@ 0x38
 8003a4c:	d805      	bhi.n	8003a5a <osThreadNew+0x6e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <osThreadNew+0x72>
        return (NULL);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e054      	b.n	8003b08 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	089b      	lsrs	r3, r3, #2
 8003a6c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00e      	beq.n	8003a94 <osThreadNew+0xa8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b5b      	cmp	r3, #91	@ 0x5b
 8003a7c:	d90a      	bls.n	8003a94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d006      	beq.n	8003a94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <osThreadNew+0xa8>
        mem = 1;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	e010      	b.n	8003ab6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10c      	bne.n	8003ab6 <osThreadNew+0xca>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d108      	bne.n	8003ab6 <osThreadNew+0xca>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d104      	bne.n	8003ab6 <osThreadNew+0xca>
          mem = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	e001      	b.n	8003ab6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d110      	bne.n	8003ade <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ac4:	9202      	str	r2, [sp, #8]
 8003ac6:	9301      	str	r3, [sp, #4]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	6a3a      	ldr	r2, [r7, #32]
 8003ad0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fe1a 	bl	800470c <xTaskCreateStatic>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	613b      	str	r3, [r7, #16]
 8003adc:	e013      	b.n	8003b06 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d110      	bne.n	8003b06 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	f107 0310 	add.w	r3, r7, #16
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 fe68 	bl	80047cc <xTaskCreate>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d001      	beq.n	8003b06 <osThreadNew+0x11a>
            hTask = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b06:	693b      	ldr	r3, [r7, #16]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3728      	adds	r7, #40	@ 0x28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b18:	f3ef 8305 	mrs	r3, IPSR
 8003b1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <osDelay+0x1c>
    stat = osErrorISR;
 8003b24:	f06f 0305 	mvn.w	r3, #5
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	e007      	b.n	8003b3c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 ff8e 	bl	8004a58 <vTaskDelay>
    }
  }

  return (stat);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a07      	ldr	r2, [pc, #28]	@ (8003b74 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	4a06      	ldr	r2, [pc, #24]	@ (8003b78 <vApplicationGetIdleTaskMemory+0x30>)
 8003b5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2280      	movs	r2, #128	@ 0x80
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	200005ac 	.word	0x200005ac
 8003b78:	20000608 	.word	0x20000608

08003b7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a07      	ldr	r2, [pc, #28]	@ (8003ba8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4a06      	ldr	r2, [pc, #24]	@ (8003bac <vApplicationGetTimerTaskMemory+0x30>)
 8003b92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b9a:	601a      	str	r2, [r3, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	20000808 	.word	0x20000808
 8003bac:	20000864 	.word	0x20000864

08003bb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f103 0208 	add.w	r2, r3, #8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f103 0208 	add.w	r2, r3, #8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f103 0208 	add.w	r2, r3, #8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	601a      	str	r2, [r3, #0]
}
 8003c46:	bf00      	nop
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d103      	bne.n	8003c72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	e00c      	b.n	8003c8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3308      	adds	r3, #8
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e002      	b.n	8003c80 <vListInsert+0x2e>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d2f6      	bcs.n	8003c7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	601a      	str	r2, [r3, #0]
}
 8003cb8:	bf00      	nop
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6892      	ldr	r2, [r2, #8]
 8003cda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6852      	ldr	r2, [r2, #4]
 8003ce4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d103      	bne.n	8003cf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	1e5a      	subs	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10b      	bne.n	8003d44 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d3e:	bf00      	nop
 8003d40:	bf00      	nop
 8003d42:	e7fd      	b.n	8003d40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d44:	f002 f878 	bl	8005e38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d50:	68f9      	ldr	r1, [r7, #12]
 8003d52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	441a      	add	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d74:	3b01      	subs	r3, #1
 8003d76:	68f9      	ldr	r1, [r7, #12]
 8003d78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	441a      	add	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	22ff      	movs	r2, #255	@ 0xff
 8003d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	22ff      	movs	r2, #255	@ 0xff
 8003d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d114      	bne.n	8003dc4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01a      	beq.n	8003dd8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3310      	adds	r3, #16
 8003da6:	4618      	mov	r0, r3
 8003da8:	f001 f91a 	bl	8004fe0 <xTaskRemoveFromEventList>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d012      	beq.n	8003dd8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003db2:	4b0d      	ldr	r3, [pc, #52]	@ (8003de8 <xQueueGenericReset+0xd0>)
 8003db4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	e009      	b.n	8003dd8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3310      	adds	r3, #16
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fef1 	bl	8003bb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3324      	adds	r3, #36	@ 0x24
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7ff feec 	bl	8003bb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003dd8:	f002 f860 	bl	8005e9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003ddc:	2301      	movs	r3, #1
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	e000ed04 	.word	0xe000ed04

08003dec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08e      	sub	sp, #56	@ 0x38
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e12:	bf00      	nop
 8003e14:	bf00      	nop
 8003e16:	e7fd      	b.n	8003e14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10b      	bne.n	8003e36 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	e7fd      	b.n	8003e32 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <xQueueGenericCreateStatic+0x56>
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <xQueueGenericCreateStatic+0x5a>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <xQueueGenericCreateStatic+0x5c>
 8003e46:	2300      	movs	r3, #0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10b      	bne.n	8003e64 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	623b      	str	r3, [r7, #32]
}
 8003e5e:	bf00      	nop
 8003e60:	bf00      	nop
 8003e62:	e7fd      	b.n	8003e60 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d102      	bne.n	8003e70 <xQueueGenericCreateStatic+0x84>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <xQueueGenericCreateStatic+0x88>
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <xQueueGenericCreateStatic+0x8a>
 8003e74:	2300      	movs	r3, #0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10b      	bne.n	8003e92 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	61fb      	str	r3, [r7, #28]
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	e7fd      	b.n	8003e8e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e92:	2350      	movs	r3, #80	@ 0x50
 8003e94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b50      	cmp	r3, #80	@ 0x50
 8003e9a:	d00b      	beq.n	8003eb4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	61bb      	str	r3, [r7, #24]
}
 8003eae:	bf00      	nop
 8003eb0:	bf00      	nop
 8003eb2:	e7fd      	b.n	8003eb0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003eb4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00d      	beq.n	8003edc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ec8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f805 	bl	8003ee6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3730      	adds	r7, #48	@ 0x30
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d103      	bne.n	8003f02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	e002      	b.n	8003f08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f14:	2101      	movs	r1, #1
 8003f16:	69b8      	ldr	r0, [r7, #24]
 8003f18:	f7ff fefe 	bl	8003d18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	78fa      	ldrb	r2, [r7, #3]
 8003f20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08e      	sub	sp, #56	@ 0x38
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10b      	bne.n	8003f60 <xQueueGenericSend+0x34>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f5a:	bf00      	nop
 8003f5c:	bf00      	nop
 8003f5e:	e7fd      	b.n	8003f5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d103      	bne.n	8003f6e <xQueueGenericSend+0x42>
 8003f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <xQueueGenericSend+0x46>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <xQueueGenericSend+0x48>
 8003f72:	2300      	movs	r3, #0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10b      	bne.n	8003f90 <xQueueGenericSend+0x64>
	__asm volatile
 8003f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f8a:	bf00      	nop
 8003f8c:	bf00      	nop
 8003f8e:	e7fd      	b.n	8003f8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d103      	bne.n	8003f9e <xQueueGenericSend+0x72>
 8003f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <xQueueGenericSend+0x76>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <xQueueGenericSend+0x78>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10b      	bne.n	8003fc0 <xQueueGenericSend+0x94>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	623b      	str	r3, [r7, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	bf00      	nop
 8003fbe:	e7fd      	b.n	8003fbc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fc0:	f001 f9ce 	bl	8005360 <xTaskGetSchedulerState>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <xQueueGenericSend+0xa4>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <xQueueGenericSend+0xa8>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <xQueueGenericSend+0xaa>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10b      	bne.n	8003ff2 <xQueueGenericSend+0xc6>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	61fb      	str	r3, [r7, #28]
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	e7fd      	b.n	8003fee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ff2:	f001 ff21 	bl	8005e38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <xQueueGenericSend+0xdc>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b02      	cmp	r3, #2
 8004006:	d129      	bne.n	800405c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800400e:	f000 fa0f 	bl	8004430 <prvCopyDataToQueue>
 8004012:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	2b00      	cmp	r3, #0
 800401a:	d010      	beq.n	800403e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	3324      	adds	r3, #36	@ 0x24
 8004020:	4618      	mov	r0, r3
 8004022:	f000 ffdd 	bl	8004fe0 <xTaskRemoveFromEventList>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d013      	beq.n	8004054 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800402c:	4b3f      	ldr	r3, [pc, #252]	@ (800412c <xQueueGenericSend+0x200>)
 800402e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	e00a      	b.n	8004054 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800403e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d007      	beq.n	8004054 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004044:	4b39      	ldr	r3, [pc, #228]	@ (800412c <xQueueGenericSend+0x200>)
 8004046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004054:	f001 ff22 	bl	8005e9c <vPortExitCritical>
				return pdPASS;
 8004058:	2301      	movs	r3, #1
 800405a:	e063      	b.n	8004124 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004062:	f001 ff1b 	bl	8005e9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004066:	2300      	movs	r3, #0
 8004068:	e05c      	b.n	8004124 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800406a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406c:	2b00      	cmp	r3, #0
 800406e:	d106      	bne.n	800407e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004070:	f107 0314 	add.w	r3, r7, #20
 8004074:	4618      	mov	r0, r3
 8004076:	f001 f817 	bl	80050a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800407a:	2301      	movs	r3, #1
 800407c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800407e:	f001 ff0d 	bl	8005e9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004082:	f000 fd87 	bl	8004b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004086:	f001 fed7 	bl	8005e38 <vPortEnterCritical>
 800408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004090:	b25b      	sxtb	r3, r3
 8004092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004096:	d103      	bne.n	80040a0 <xQueueGenericSend+0x174>
 8004098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040a6:	b25b      	sxtb	r3, r3
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d103      	bne.n	80040b6 <xQueueGenericSend+0x18a>
 80040ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040b6:	f001 fef1 	bl	8005e9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040ba:	1d3a      	adds	r2, r7, #4
 80040bc:	f107 0314 	add.w	r3, r7, #20
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f001 f806 	bl	80050d4 <xTaskCheckForTimeOut>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d124      	bne.n	8004118 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040d0:	f000 faa6 	bl	8004620 <prvIsQueueFull>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d018      	beq.n	800410c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040dc:	3310      	adds	r3, #16
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 ff2a 	bl	8004f3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040ea:	f000 fa31 	bl	8004550 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040ee:	f000 fd5f 	bl	8004bb0 <xTaskResumeAll>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f47f af7c 	bne.w	8003ff2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80040fa:	4b0c      	ldr	r3, [pc, #48]	@ (800412c <xQueueGenericSend+0x200>)
 80040fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	e772      	b.n	8003ff2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800410c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800410e:	f000 fa1f 	bl	8004550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004112:	f000 fd4d 	bl	8004bb0 <xTaskResumeAll>
 8004116:	e76c      	b.n	8003ff2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004118:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800411a:	f000 fa19 	bl	8004550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800411e:	f000 fd47 	bl	8004bb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004122:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004124:	4618      	mov	r0, r3
 8004126:	3738      	adds	r7, #56	@ 0x38
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	e000ed04 	.word	0xe000ed04

08004130 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b090      	sub	sp, #64	@ 0x40
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10b      	bne.n	8004160 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414c:	f383 8811 	msr	BASEPRI, r3
 8004150:	f3bf 8f6f 	isb	sy
 8004154:	f3bf 8f4f 	dsb	sy
 8004158:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800415a:	bf00      	nop
 800415c:	bf00      	nop
 800415e:	e7fd      	b.n	800415c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d103      	bne.n	800416e <xQueueGenericSendFromISR+0x3e>
 8004166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <xQueueGenericSendFromISR+0x42>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <xQueueGenericSendFromISR+0x44>
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10b      	bne.n	8004190 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800418a:	bf00      	nop
 800418c:	bf00      	nop
 800418e:	e7fd      	b.n	800418c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d103      	bne.n	800419e <xQueueGenericSendFromISR+0x6e>
 8004196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <xQueueGenericSendFromISR+0x72>
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <xQueueGenericSendFromISR+0x74>
 80041a2:	2300      	movs	r3, #0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	623b      	str	r3, [r7, #32]
}
 80041ba:	bf00      	nop
 80041bc:	bf00      	nop
 80041be:	e7fd      	b.n	80041bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041c0:	f001 ff1a 	bl	8005ff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041c4:	f3ef 8211 	mrs	r2, BASEPRI
 80041c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	61fa      	str	r2, [r7, #28]
 80041da:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d302      	bcc.n	80041f2 <xQueueGenericSendFromISR+0xc2>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d12f      	bne.n	8004252 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004200:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004208:	f000 f912 	bl	8004430 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800420c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d112      	bne.n	800423c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	2b00      	cmp	r3, #0
 800421c:	d016      	beq.n	800424c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800421e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004220:	3324      	adds	r3, #36	@ 0x24
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fedc 	bl	8004fe0 <xTaskRemoveFromEventList>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00e      	beq.n	800424c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e007      	b.n	800424c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800423c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004240:	3301      	adds	r3, #1
 8004242:	b2db      	uxtb	r3, r3
 8004244:	b25a      	sxtb	r2, r3
 8004246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004248:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800424c:	2301      	movs	r3, #1
 800424e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004250:	e001      	b.n	8004256 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004252:	2300      	movs	r3, #0
 8004254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004258:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004260:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004264:	4618      	mov	r0, r3
 8004266:	3740      	adds	r7, #64	@ 0x40
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08c      	sub	sp, #48	@ 0x30
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004278:	2300      	movs	r3, #0
 800427a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10b      	bne.n	800429e <xQueueReceive+0x32>
	__asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	623b      	str	r3, [r7, #32]
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	e7fd      	b.n	800429a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d103      	bne.n	80042ac <xQueueReceive+0x40>
 80042a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <xQueueReceive+0x44>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <xQueueReceive+0x46>
 80042b0:	2300      	movs	r3, #0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <xQueueReceive+0x62>
	__asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	61fb      	str	r3, [r7, #28]
}
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop
 80042cc:	e7fd      	b.n	80042ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ce:	f001 f847 	bl	8005360 <xTaskGetSchedulerState>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <xQueueReceive+0x72>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <xQueueReceive+0x76>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <xQueueReceive+0x78>
 80042e2:	2300      	movs	r3, #0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <xQueueReceive+0x94>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	61bb      	str	r3, [r7, #24]
}
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004300:	f001 fd9a 	bl	8005e38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004308:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01f      	beq.n	8004350 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004314:	f000 f8f6 	bl	8004504 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	1e5a      	subs	r2, r3, #1
 800431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00f      	beq.n	8004348 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432a:	3310      	adds	r3, #16
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fe57 	bl	8004fe0 <xTaskRemoveFromEventList>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004338:	4b3c      	ldr	r3, [pc, #240]	@ (800442c <xQueueReceive+0x1c0>)
 800433a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004348:	f001 fda8 	bl	8005e9c <vPortExitCritical>
				return pdPASS;
 800434c:	2301      	movs	r3, #1
 800434e:	e069      	b.n	8004424 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d103      	bne.n	800435e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004356:	f001 fda1 	bl	8005e9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800435a:	2300      	movs	r3, #0
 800435c:	e062      	b.n	8004424 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800435e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004364:	f107 0310 	add.w	r3, r7, #16
 8004368:	4618      	mov	r0, r3
 800436a:	f000 fe9d 	bl	80050a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800436e:	2301      	movs	r3, #1
 8004370:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004372:	f001 fd93 	bl	8005e9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004376:	f000 fc0d 	bl	8004b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800437a:	f001 fd5d 	bl	8005e38 <vPortEnterCritical>
 800437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004380:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004384:	b25b      	sxtb	r3, r3
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d103      	bne.n	8004394 <xQueueReceive+0x128>
 800438c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004396:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800439a:	b25b      	sxtb	r3, r3
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d103      	bne.n	80043aa <xQueueReceive+0x13e>
 80043a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043aa:	f001 fd77 	bl	8005e9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043ae:	1d3a      	adds	r2, r7, #4
 80043b0:	f107 0310 	add.w	r3, r7, #16
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fe8c 	bl	80050d4 <xTaskCheckForTimeOut>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d123      	bne.n	800440a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043c4:	f000 f916 	bl	80045f4 <prvIsQueueEmpty>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d017      	beq.n	80043fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d0:	3324      	adds	r3, #36	@ 0x24
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fdb0 	bl	8004f3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043de:	f000 f8b7 	bl	8004550 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043e2:	f000 fbe5 	bl	8004bb0 <xTaskResumeAll>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d189      	bne.n	8004300 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80043ec:	4b0f      	ldr	r3, [pc, #60]	@ (800442c <xQueueReceive+0x1c0>)
 80043ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	e780      	b.n	8004300 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004400:	f000 f8a6 	bl	8004550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004404:	f000 fbd4 	bl	8004bb0 <xTaskResumeAll>
 8004408:	e77a      	b.n	8004300 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800440a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800440c:	f000 f8a0 	bl	8004550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004410:	f000 fbce 	bl	8004bb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004414:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004416:	f000 f8ed 	bl	80045f4 <prvIsQueueEmpty>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	f43f af6f 	beq.w	8004300 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004422:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004424:	4618      	mov	r0, r3
 8004426:	3730      	adds	r7, #48	@ 0x30
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	e000ed04 	.word	0xe000ed04

08004430 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004444:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10d      	bne.n	800446a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d14d      	bne.n	80044f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 ff9e 	bl	800539c <xTaskPriorityDisinherit>
 8004460:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	e043      	b.n	80044f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d119      	bne.n	80044a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6858      	ldr	r0, [r3, #4]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004478:	461a      	mov	r2, r3
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	f002 f818 	bl	80064b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004488:	441a      	add	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	429a      	cmp	r2, r3
 8004498:	d32b      	bcc.n	80044f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	e026      	b.n	80044f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68d8      	ldr	r0, [r3, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	461a      	mov	r2, r3
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	f001 fffe 	bl	80064b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	425b      	negs	r3, r3
 80044be:	441a      	add	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d207      	bcs.n	80044e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	425b      	negs	r3, r3
 80044da:	441a      	add	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d105      	bne.n	80044f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80044fa:	697b      	ldr	r3, [r7, #20]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d018      	beq.n	8004548 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	441a      	add	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	429a      	cmp	r2, r3
 800452e:	d303      	bcc.n	8004538 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68d9      	ldr	r1, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004540:	461a      	mov	r2, r3
 8004542:	6838      	ldr	r0, [r7, #0]
 8004544:	f001 ffb4 	bl	80064b0 <memcpy>
	}
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004558:	f001 fc6e 	bl	8005e38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004562:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004564:	e011      	b.n	800458a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456a:	2b00      	cmp	r3, #0
 800456c:	d012      	beq.n	8004594 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3324      	adds	r3, #36	@ 0x24
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fd34 	bl	8004fe0 <xTaskRemoveFromEventList>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800457e:	f000 fe0d 	bl	800519c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	3b01      	subs	r3, #1
 8004586:	b2db      	uxtb	r3, r3
 8004588:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800458a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	dce9      	bgt.n	8004566 <prvUnlockQueue+0x16>
 8004592:	e000      	b.n	8004596 <prvUnlockQueue+0x46>
					break;
 8004594:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	22ff      	movs	r2, #255	@ 0xff
 800459a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800459e:	f001 fc7d 	bl	8005e9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045a2:	f001 fc49 	bl	8005e38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045ae:	e011      	b.n	80045d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d012      	beq.n	80045de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3310      	adds	r3, #16
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fd0f 	bl	8004fe0 <xTaskRemoveFromEventList>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045c8:	f000 fde8 	bl	800519c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045cc:	7bbb      	ldrb	r3, [r7, #14]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	dce9      	bgt.n	80045b0 <prvUnlockQueue+0x60>
 80045dc:	e000      	b.n	80045e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	22ff      	movs	r2, #255	@ 0xff
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80045e8:	f001 fc58 	bl	8005e9c <vPortExitCritical>
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045fc:	f001 fc1c 	bl	8005e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004608:	2301      	movs	r3, #1
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e001      	b.n	8004612 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004612:	f001 fc43 	bl	8005e9c <vPortExitCritical>

	return xReturn;
 8004616:	68fb      	ldr	r3, [r7, #12]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004628:	f001 fc06 	bl	8005e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004634:	429a      	cmp	r2, r3
 8004636:	d102      	bne.n	800463e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004638:	2301      	movs	r3, #1
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	e001      	b.n	8004642 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004642:	f001 fc2b 	bl	8005e9c <vPortExitCritical>

	return xReturn;
 8004646:	68fb      	ldr	r3, [r7, #12]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	e014      	b.n	800468a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004660:	4a0f      	ldr	r2, [pc, #60]	@ (80046a0 <vQueueAddToRegistry+0x50>)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800466c:	490c      	ldr	r1, [pc, #48]	@ (80046a0 <vQueueAddToRegistry+0x50>)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004676:	4a0a      	ldr	r2, [pc, #40]	@ (80046a0 <vQueueAddToRegistry+0x50>)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004682:	e006      	b.n	8004692 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3301      	adds	r3, #1
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b07      	cmp	r3, #7
 800468e:	d9e7      	bls.n	8004660 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20000c64 	.word	0x20000c64

080046a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80046b4:	f001 fbc0 	bl	8005e38 <vPortEnterCritical>
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046be:	b25b      	sxtb	r3, r3
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c4:	d103      	bne.n	80046ce <vQueueWaitForMessageRestricted+0x2a>
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046d4:	b25b      	sxtb	r3, r3
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	d103      	bne.n	80046e4 <vQueueWaitForMessageRestricted+0x40>
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046e4:	f001 fbda 	bl	8005e9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	3324      	adds	r3, #36	@ 0x24
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fc45 	bl	8004f88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046fe:	6978      	ldr	r0, [r7, #20]
 8004700:	f7ff ff26 	bl	8004550 <prvUnlockQueue>
	}
 8004704:	bf00      	nop
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08e      	sub	sp, #56	@ 0x38
 8004710:	af04      	add	r7, sp, #16
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800471a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	623b      	str	r3, [r7, #32]
}
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	e7fd      	b.n	8004734 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10b      	bne.n	8004756 <xTaskCreateStatic+0x4a>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	61fb      	str	r3, [r7, #28]
}
 8004750:	bf00      	nop
 8004752:	bf00      	nop
 8004754:	e7fd      	b.n	8004752 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004756:	235c      	movs	r3, #92	@ 0x5c
 8004758:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b5c      	cmp	r3, #92	@ 0x5c
 800475e:	d00b      	beq.n	8004778 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	61bb      	str	r3, [r7, #24]
}
 8004772:	bf00      	nop
 8004774:	bf00      	nop
 8004776:	e7fd      	b.n	8004774 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004778:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800477a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01e      	beq.n	80047be <xTaskCreateStatic+0xb2>
 8004780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01b      	beq.n	80047be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004788:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800478e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004798:	2300      	movs	r3, #0
 800479a:	9303      	str	r3, [sp, #12]
 800479c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479e:	9302      	str	r3, [sp, #8]
 80047a0:	f107 0314 	add.w	r3, r7, #20
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f850 	bl	8004856 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80047b8:	f000 f8de 	bl	8004978 <prvAddNewTaskToReadyList>
 80047bc:	e001      	b.n	80047c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047c2:	697b      	ldr	r3, [r7, #20]
	}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3728      	adds	r7, #40	@ 0x28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08c      	sub	sp, #48	@ 0x30
 80047d0:	af04      	add	r7, sp, #16
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047dc:	88fb      	ldrh	r3, [r7, #6]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f001 fc4b 	bl	800607c <pvPortMalloc>
 80047e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00e      	beq.n	800480c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047ee:	205c      	movs	r0, #92	@ 0x5c
 80047f0:	f001 fc44 	bl	800607c <pvPortMalloc>
 80047f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	631a      	str	r2, [r3, #48]	@ 0x30
 8004802:	e005      	b.n	8004810 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004804:	6978      	ldr	r0, [r7, #20]
 8004806:	f001 fd07 	bl	8006218 <vPortFree>
 800480a:	e001      	b.n	8004810 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800480c:	2300      	movs	r3, #0
 800480e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d017      	beq.n	8004846 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800481e:	88fa      	ldrh	r2, [r7, #6]
 8004820:	2300      	movs	r3, #0
 8004822:	9303      	str	r3, [sp, #12]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	9302      	str	r3, [sp, #8]
 8004828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f80e 	bl	8004856 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800483a:	69f8      	ldr	r0, [r7, #28]
 800483c:	f000 f89c 	bl	8004978 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004840:	2301      	movs	r3, #1
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	e002      	b.n	800484c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004846:	f04f 33ff 	mov.w	r3, #4294967295
 800484a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800484c:	69bb      	ldr	r3, [r7, #24]
	}
 800484e:	4618      	mov	r0, r3
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b088      	sub	sp, #32
 800485a:	af00      	add	r7, sp, #0
 800485c:	60f8      	str	r0, [r7, #12]
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
 8004862:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	461a      	mov	r2, r3
 800486e:	21a5      	movs	r1, #165	@ 0xa5
 8004870:	f001 fdf2 	bl	8006458 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004876:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800487e:	3b01      	subs	r3, #1
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	f023 0307 	bic.w	r3, r3, #7
 800488c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00b      	beq.n	80048b0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	617b      	str	r3, [r7, #20]
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	e7fd      	b.n	80048ac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01f      	beq.n	80048f6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
 80048ba:	e012      	b.n	80048e2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	7819      	ldrb	r1, [r3, #0]
 80048c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	4413      	add	r3, r2
 80048ca:	3334      	adds	r3, #52	@ 0x34
 80048cc:	460a      	mov	r2, r1
 80048ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d006      	beq.n	80048ea <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	3301      	adds	r3, #1
 80048e0:	61fb      	str	r3, [r7, #28]
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	2b0f      	cmp	r3, #15
 80048e6:	d9e9      	bls.n	80048bc <prvInitialiseNewTask+0x66>
 80048e8:	e000      	b.n	80048ec <prvInitialiseNewTask+0x96>
			{
				break;
 80048ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048f4:	e003      	b.n	80048fe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004900:	2b37      	cmp	r3, #55	@ 0x37
 8004902:	d901      	bls.n	8004908 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004904:	2337      	movs	r3, #55	@ 0x37
 8004906:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800490c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800490e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004910:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004912:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004916:	2200      	movs	r2, #0
 8004918:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800491a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491c:	3304      	adds	r3, #4
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff f966 	bl	8003bf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004926:	3318      	adds	r3, #24
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff f961 	bl	8003bf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800492e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004932:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800493a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004942:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004946:	2200      	movs	r2, #0
 8004948:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800494a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	68f9      	ldr	r1, [r7, #12]
 8004956:	69b8      	ldr	r0, [r7, #24]
 8004958:	f001 f93e 	bl	8005bd8 <pxPortInitialiseStack>
 800495c:	4602      	mov	r2, r0
 800495e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004960:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800496c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800496e:	bf00      	nop
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004980:	f001 fa5a 	bl	8005e38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004984:	4b2d      	ldr	r3, [pc, #180]	@ (8004a3c <prvAddNewTaskToReadyList+0xc4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3301      	adds	r3, #1
 800498a:	4a2c      	ldr	r2, [pc, #176]	@ (8004a3c <prvAddNewTaskToReadyList+0xc4>)
 800498c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800498e:	4b2c      	ldr	r3, [pc, #176]	@ (8004a40 <prvAddNewTaskToReadyList+0xc8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004996:	4a2a      	ldr	r2, [pc, #168]	@ (8004a40 <prvAddNewTaskToReadyList+0xc8>)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800499c:	4b27      	ldr	r3, [pc, #156]	@ (8004a3c <prvAddNewTaskToReadyList+0xc4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d110      	bne.n	80049c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049a4:	f000 fc1e 	bl	80051e4 <prvInitialiseTaskLists>
 80049a8:	e00d      	b.n	80049c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049aa:	4b26      	ldr	r3, [pc, #152]	@ (8004a44 <prvAddNewTaskToReadyList+0xcc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049b2:	4b23      	ldr	r3, [pc, #140]	@ (8004a40 <prvAddNewTaskToReadyList+0xc8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	429a      	cmp	r2, r3
 80049be:	d802      	bhi.n	80049c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004a40 <prvAddNewTaskToReadyList+0xc8>)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049c6:	4b20      	ldr	r3, [pc, #128]	@ (8004a48 <prvAddNewTaskToReadyList+0xd0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3301      	adds	r3, #1
 80049cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004a48 <prvAddNewTaskToReadyList+0xd0>)
 80049ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a48 <prvAddNewTaskToReadyList+0xd0>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049dc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a4c <prvAddNewTaskToReadyList+0xd4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d903      	bls.n	80049ec <prvAddNewTaskToReadyList+0x74>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e8:	4a18      	ldr	r2, [pc, #96]	@ (8004a4c <prvAddNewTaskToReadyList+0xd4>)
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4a15      	ldr	r2, [pc, #84]	@ (8004a50 <prvAddNewTaskToReadyList+0xd8>)
 80049fa:	441a      	add	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f7ff f901 	bl	8003c0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a08:	f001 fa48 	bl	8005e9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <prvAddNewTaskToReadyList+0xcc>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00e      	beq.n	8004a32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a14:	4b0a      	ldr	r3, [pc, #40]	@ (8004a40 <prvAddNewTaskToReadyList+0xc8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d207      	bcs.n	8004a32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a22:	4b0c      	ldr	r3, [pc, #48]	@ (8004a54 <prvAddNewTaskToReadyList+0xdc>)
 8004a24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20001178 	.word	0x20001178
 8004a40:	20000ca4 	.word	0x20000ca4
 8004a44:	20001184 	.word	0x20001184
 8004a48:	20001194 	.word	0x20001194
 8004a4c:	20001180 	.word	0x20001180
 8004a50:	20000ca8 	.word	0x20000ca8
 8004a54:	e000ed04 	.word	0xe000ed04

08004a58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d018      	beq.n	8004a9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a6a:	4b14      	ldr	r3, [pc, #80]	@ (8004abc <vTaskDelay+0x64>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <vTaskDelay+0x32>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	60bb      	str	r3, [r7, #8]
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	e7fd      	b.n	8004a86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a8a:	f000 f883 	bl	8004b94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a8e:	2100      	movs	r1, #0
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fcf3 	bl	800547c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a96:	f000 f88b 	bl	8004bb0 <xTaskResumeAll>
 8004a9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d107      	bne.n	8004ab2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004aa2:	4b07      	ldr	r3, [pc, #28]	@ (8004ac0 <vTaskDelay+0x68>)
 8004aa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200011a0 	.word	0x200011a0
 8004ac0:	e000ed04 	.word	0xe000ed04

08004ac4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08a      	sub	sp, #40	@ 0x28
 8004ac8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ad2:	463a      	mov	r2, r7
 8004ad4:	1d39      	adds	r1, r7, #4
 8004ad6:	f107 0308 	add.w	r3, r7, #8
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff f834 	bl	8003b48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ae0:	6839      	ldr	r1, [r7, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	9202      	str	r2, [sp, #8]
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	2300      	movs	r3, #0
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	2300      	movs	r3, #0
 8004af0:	460a      	mov	r2, r1
 8004af2:	4922      	ldr	r1, [pc, #136]	@ (8004b7c <vTaskStartScheduler+0xb8>)
 8004af4:	4822      	ldr	r0, [pc, #136]	@ (8004b80 <vTaskStartScheduler+0xbc>)
 8004af6:	f7ff fe09 	bl	800470c <xTaskCreateStatic>
 8004afa:	4603      	mov	r3, r0
 8004afc:	4a21      	ldr	r2, [pc, #132]	@ (8004b84 <vTaskStartScheduler+0xc0>)
 8004afe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b00:	4b20      	ldr	r3, [pc, #128]	@ (8004b84 <vTaskStartScheduler+0xc0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	e001      	b.n	8004b12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d102      	bne.n	8004b1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b18:	f000 fd04 	bl	8005524 <xTimerCreateTimerTask>
 8004b1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d116      	bne.n	8004b52 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	613b      	str	r3, [r7, #16]
}
 8004b36:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b38:	4b13      	ldr	r3, [pc, #76]	@ (8004b88 <vTaskStartScheduler+0xc4>)
 8004b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b40:	4b12      	ldr	r3, [pc, #72]	@ (8004b8c <vTaskStartScheduler+0xc8>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b46:	4b12      	ldr	r3, [pc, #72]	@ (8004b90 <vTaskStartScheduler+0xcc>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b4c:	f001 f8d0 	bl	8005cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b50:	e00f      	b.n	8004b72 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b58:	d10b      	bne.n	8004b72 <vTaskStartScheduler+0xae>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	60fb      	str	r3, [r7, #12]
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	e7fd      	b.n	8004b6e <vTaskStartScheduler+0xaa>
}
 8004b72:	bf00      	nop
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	080064f0 	.word	0x080064f0
 8004b80:	080051b5 	.word	0x080051b5
 8004b84:	2000119c 	.word	0x2000119c
 8004b88:	20001198 	.word	0x20001198
 8004b8c:	20001184 	.word	0x20001184
 8004b90:	2000117c 	.word	0x2000117c

08004b94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b98:	4b04      	ldr	r3, [pc, #16]	@ (8004bac <vTaskSuspendAll+0x18>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	4a03      	ldr	r2, [pc, #12]	@ (8004bac <vTaskSuspendAll+0x18>)
 8004ba0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ba2:	bf00      	nop
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	200011a0 	.word	0x200011a0

08004bb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bbe:	4b42      	ldr	r3, [pc, #264]	@ (8004cc8 <xTaskResumeAll+0x118>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10b      	bne.n	8004bde <xTaskResumeAll+0x2e>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	603b      	str	r3, [r7, #0]
}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	e7fd      	b.n	8004bda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004bde:	f001 f92b 	bl	8005e38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004be2:	4b39      	ldr	r3, [pc, #228]	@ (8004cc8 <xTaskResumeAll+0x118>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	4a37      	ldr	r2, [pc, #220]	@ (8004cc8 <xTaskResumeAll+0x118>)
 8004bea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bec:	4b36      	ldr	r3, [pc, #216]	@ (8004cc8 <xTaskResumeAll+0x118>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d162      	bne.n	8004cba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bf4:	4b35      	ldr	r3, [pc, #212]	@ (8004ccc <xTaskResumeAll+0x11c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d05e      	beq.n	8004cba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bfc:	e02f      	b.n	8004c5e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bfe:	4b34      	ldr	r3, [pc, #208]	@ (8004cd0 <xTaskResumeAll+0x120>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3318      	adds	r3, #24
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff f85a 	bl	8003cc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff f855 	bl	8003cc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd4 <xTaskResumeAll+0x124>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d903      	bls.n	8004c2e <xTaskResumeAll+0x7e>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004cd4 <xTaskResumeAll+0x124>)
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4a27      	ldr	r2, [pc, #156]	@ (8004cd8 <xTaskResumeAll+0x128>)
 8004c3c:	441a      	add	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3304      	adds	r3, #4
 8004c42:	4619      	mov	r1, r3
 8004c44:	4610      	mov	r0, r2
 8004c46:	f7fe ffe0 	bl	8003c0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4e:	4b23      	ldr	r3, [pc, #140]	@ (8004cdc <xTaskResumeAll+0x12c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d302      	bcc.n	8004c5e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004c58:	4b21      	ldr	r3, [pc, #132]	@ (8004ce0 <xTaskResumeAll+0x130>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8004cd0 <xTaskResumeAll+0x120>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1cb      	bne.n	8004bfe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c6c:	f000 fb58 	bl	8005320 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c70:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce4 <xTaskResumeAll+0x134>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d010      	beq.n	8004c9e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c7c:	f000 f846 	bl	8004d0c <xTaskIncrementTick>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004c86:	4b16      	ldr	r3, [pc, #88]	@ (8004ce0 <xTaskResumeAll+0x130>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1f1      	bne.n	8004c7c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004c98:	4b12      	ldr	r3, [pc, #72]	@ (8004ce4 <xTaskResumeAll+0x134>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ce0 <xTaskResumeAll+0x130>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d009      	beq.n	8004cba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004caa:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce8 <xTaskResumeAll+0x138>)
 8004cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cba:	f001 f8ef 	bl	8005e9c <vPortExitCritical>

	return xAlreadyYielded;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	200011a0 	.word	0x200011a0
 8004ccc:	20001178 	.word	0x20001178
 8004cd0:	20001138 	.word	0x20001138
 8004cd4:	20001180 	.word	0x20001180
 8004cd8:	20000ca8 	.word	0x20000ca8
 8004cdc:	20000ca4 	.word	0x20000ca4
 8004ce0:	2000118c 	.word	0x2000118c
 8004ce4:	20001188 	.word	0x20001188
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004cf2:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <xTaskGetTickCount+0x1c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004cf8:	687b      	ldr	r3, [r7, #4]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	2000117c 	.word	0x2000117c

08004d0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d16:	4b4f      	ldr	r3, [pc, #316]	@ (8004e54 <xTaskIncrementTick+0x148>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f040 8090 	bne.w	8004e40 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d20:	4b4d      	ldr	r3, [pc, #308]	@ (8004e58 <xTaskIncrementTick+0x14c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3301      	adds	r3, #1
 8004d26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d28:	4a4b      	ldr	r2, [pc, #300]	@ (8004e58 <xTaskIncrementTick+0x14c>)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d121      	bne.n	8004d78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d34:	4b49      	ldr	r3, [pc, #292]	@ (8004e5c <xTaskIncrementTick+0x150>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00b      	beq.n	8004d56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	603b      	str	r3, [r7, #0]
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	e7fd      	b.n	8004d52 <xTaskIncrementTick+0x46>
 8004d56:	4b41      	ldr	r3, [pc, #260]	@ (8004e5c <xTaskIncrementTick+0x150>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	4b40      	ldr	r3, [pc, #256]	@ (8004e60 <xTaskIncrementTick+0x154>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a3e      	ldr	r2, [pc, #248]	@ (8004e5c <xTaskIncrementTick+0x150>)
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	4a3e      	ldr	r2, [pc, #248]	@ (8004e60 <xTaskIncrementTick+0x154>)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e64 <xTaskIncrementTick+0x158>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	4a3c      	ldr	r2, [pc, #240]	@ (8004e64 <xTaskIncrementTick+0x158>)
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	f000 fad4 	bl	8005320 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d78:	4b3b      	ldr	r3, [pc, #236]	@ (8004e68 <xTaskIncrementTick+0x15c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d349      	bcc.n	8004e16 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d82:	4b36      	ldr	r3, [pc, #216]	@ (8004e5c <xTaskIncrementTick+0x150>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d104      	bne.n	8004d96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8c:	4b36      	ldr	r3, [pc, #216]	@ (8004e68 <xTaskIncrementTick+0x15c>)
 8004d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d92:	601a      	str	r2, [r3, #0]
					break;
 8004d94:	e03f      	b.n	8004e16 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d96:	4b31      	ldr	r3, [pc, #196]	@ (8004e5c <xTaskIncrementTick+0x150>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d203      	bcs.n	8004db6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dae:	4a2e      	ldr	r2, [pc, #184]	@ (8004e68 <xTaskIncrementTick+0x15c>)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004db4:	e02f      	b.n	8004e16 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe ff82 	bl	8003cc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d004      	beq.n	8004dd2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	3318      	adds	r3, #24
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe ff79 	bl	8003cc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd6:	4b25      	ldr	r3, [pc, #148]	@ (8004e6c <xTaskIncrementTick+0x160>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d903      	bls.n	8004de6 <xTaskIncrementTick+0xda>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	4a22      	ldr	r2, [pc, #136]	@ (8004e6c <xTaskIncrementTick+0x160>)
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4a1f      	ldr	r2, [pc, #124]	@ (8004e70 <xTaskIncrementTick+0x164>)
 8004df4:	441a      	add	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	3304      	adds	r3, #4
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	f7fe ff04 	bl	8003c0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e06:	4b1b      	ldr	r3, [pc, #108]	@ (8004e74 <xTaskIncrementTick+0x168>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d3b8      	bcc.n	8004d82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004e10:	2301      	movs	r3, #1
 8004e12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e14:	e7b5      	b.n	8004d82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e16:	4b17      	ldr	r3, [pc, #92]	@ (8004e74 <xTaskIncrementTick+0x168>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e1c:	4914      	ldr	r1, [pc, #80]	@ (8004e70 <xTaskIncrementTick+0x164>)
 8004e1e:	4613      	mov	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d901      	bls.n	8004e32 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e32:	4b11      	ldr	r3, [pc, #68]	@ (8004e78 <xTaskIncrementTick+0x16c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e004      	b.n	8004e4a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e40:	4b0e      	ldr	r3, [pc, #56]	@ (8004e7c <xTaskIncrementTick+0x170>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	4a0d      	ldr	r2, [pc, #52]	@ (8004e7c <xTaskIncrementTick+0x170>)
 8004e48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e4a:	697b      	ldr	r3, [r7, #20]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	200011a0 	.word	0x200011a0
 8004e58:	2000117c 	.word	0x2000117c
 8004e5c:	20001130 	.word	0x20001130
 8004e60:	20001134 	.word	0x20001134
 8004e64:	20001190 	.word	0x20001190
 8004e68:	20001198 	.word	0x20001198
 8004e6c:	20001180 	.word	0x20001180
 8004e70:	20000ca8 	.word	0x20000ca8
 8004e74:	20000ca4 	.word	0x20000ca4
 8004e78:	2000118c 	.word	0x2000118c
 8004e7c:	20001188 	.word	0x20001188

08004e80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e86:	4b28      	ldr	r3, [pc, #160]	@ (8004f28 <vTaskSwitchContext+0xa8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e8e:	4b27      	ldr	r3, [pc, #156]	@ (8004f2c <vTaskSwitchContext+0xac>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e94:	e042      	b.n	8004f1c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004e96:	4b25      	ldr	r3, [pc, #148]	@ (8004f2c <vTaskSwitchContext+0xac>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e9c:	4b24      	ldr	r3, [pc, #144]	@ (8004f30 <vTaskSwitchContext+0xb0>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	e011      	b.n	8004ec8 <vTaskSwitchContext+0x48>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10b      	bne.n	8004ec2 <vTaskSwitchContext+0x42>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	607b      	str	r3, [r7, #4]
}
 8004ebc:	bf00      	nop
 8004ebe:	bf00      	nop
 8004ec0:	e7fd      	b.n	8004ebe <vTaskSwitchContext+0x3e>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	491a      	ldr	r1, [pc, #104]	@ (8004f34 <vTaskSwitchContext+0xb4>)
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	440b      	add	r3, r1
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0e3      	beq.n	8004ea4 <vTaskSwitchContext+0x24>
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4a13      	ldr	r2, [pc, #76]	@ (8004f34 <vTaskSwitchContext+0xb4>)
 8004ee8:	4413      	add	r3, r2
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	605a      	str	r2, [r3, #4]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	3308      	adds	r3, #8
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d104      	bne.n	8004f0c <vTaskSwitchContext+0x8c>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	605a      	str	r2, [r3, #4]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	4a09      	ldr	r2, [pc, #36]	@ (8004f38 <vTaskSwitchContext+0xb8>)
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	4a06      	ldr	r2, [pc, #24]	@ (8004f30 <vTaskSwitchContext+0xb0>)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6013      	str	r3, [r2, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	200011a0 	.word	0x200011a0
 8004f2c:	2000118c 	.word	0x2000118c
 8004f30:	20001180 	.word	0x20001180
 8004f34:	20000ca8 	.word	0x20000ca8
 8004f38:	20000ca4 	.word	0x20000ca4

08004f3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10b      	bne.n	8004f64 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	60fb      	str	r3, [r7, #12]
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	e7fd      	b.n	8004f60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f64:	4b07      	ldr	r3, [pc, #28]	@ (8004f84 <vTaskPlaceOnEventList+0x48>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3318      	adds	r3, #24
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7fe fe70 	bl	8003c52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f72:	2101      	movs	r1, #1
 8004f74:	6838      	ldr	r0, [r7, #0]
 8004f76:	f000 fa81 	bl	800547c <prvAddCurrentTaskToDelayedList>
}
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20000ca4 	.word	0x20000ca4

08004f88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10b      	bne.n	8004fb2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	617b      	str	r3, [r7, #20]
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	e7fd      	b.n	8004fae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fdc <vTaskPlaceOnEventListRestricted+0x54>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3318      	adds	r3, #24
 8004fb8:	4619      	mov	r1, r3
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7fe fe25 	bl	8003c0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	68b8      	ldr	r0, [r7, #8]
 8004fd0:	f000 fa54 	bl	800547c <prvAddCurrentTaskToDelayedList>
	}
 8004fd4:	bf00      	nop
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	20000ca4 	.word	0x20000ca4

08004fe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10b      	bne.n	800500e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	60fb      	str	r3, [r7, #12]
}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	e7fd      	b.n	800500a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	3318      	adds	r3, #24
 8005012:	4618      	mov	r0, r3
 8005014:	f7fe fe56 	bl	8003cc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005018:	4b1d      	ldr	r3, [pc, #116]	@ (8005090 <xTaskRemoveFromEventList+0xb0>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d11d      	bne.n	800505c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	3304      	adds	r3, #4
 8005024:	4618      	mov	r0, r3
 8005026:	f7fe fe4d 	bl	8003cc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800502e:	4b19      	ldr	r3, [pc, #100]	@ (8005094 <xTaskRemoveFromEventList+0xb4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d903      	bls.n	800503e <xTaskRemoveFromEventList+0x5e>
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503a:	4a16      	ldr	r2, [pc, #88]	@ (8005094 <xTaskRemoveFromEventList+0xb4>)
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4a13      	ldr	r2, [pc, #76]	@ (8005098 <xTaskRemoveFromEventList+0xb8>)
 800504c:	441a      	add	r2, r3
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	3304      	adds	r3, #4
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f7fe fdd8 	bl	8003c0a <vListInsertEnd>
 800505a:	e005      	b.n	8005068 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	3318      	adds	r3, #24
 8005060:	4619      	mov	r1, r3
 8005062:	480e      	ldr	r0, [pc, #56]	@ (800509c <xTaskRemoveFromEventList+0xbc>)
 8005064:	f7fe fdd1 	bl	8003c0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506c:	4b0c      	ldr	r3, [pc, #48]	@ (80050a0 <xTaskRemoveFromEventList+0xc0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005072:	429a      	cmp	r2, r3
 8005074:	d905      	bls.n	8005082 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005076:	2301      	movs	r3, #1
 8005078:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800507a:	4b0a      	ldr	r3, [pc, #40]	@ (80050a4 <xTaskRemoveFromEventList+0xc4>)
 800507c:	2201      	movs	r2, #1
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	e001      	b.n	8005086 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005086:	697b      	ldr	r3, [r7, #20]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	200011a0 	.word	0x200011a0
 8005094:	20001180 	.word	0x20001180
 8005098:	20000ca8 	.word	0x20000ca8
 800509c:	20001138 	.word	0x20001138
 80050a0:	20000ca4 	.word	0x20000ca4
 80050a4:	2000118c 	.word	0x2000118c

080050a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050b0:	4b06      	ldr	r3, [pc, #24]	@ (80050cc <vTaskInternalSetTimeOutState+0x24>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050b8:	4b05      	ldr	r3, [pc, #20]	@ (80050d0 <vTaskInternalSetTimeOutState+0x28>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	605a      	str	r2, [r3, #4]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	20001190 	.word	0x20001190
 80050d0:	2000117c 	.word	0x2000117c

080050d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10b      	bne.n	80050fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	613b      	str	r3, [r7, #16]
}
 80050f6:	bf00      	nop
 80050f8:	bf00      	nop
 80050fa:	e7fd      	b.n	80050f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10b      	bne.n	800511a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60fb      	str	r3, [r7, #12]
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	e7fd      	b.n	8005116 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800511a:	f000 fe8d 	bl	8005e38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800511e:	4b1d      	ldr	r3, [pc, #116]	@ (8005194 <xTaskCheckForTimeOut+0xc0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005136:	d102      	bne.n	800513e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005138:	2300      	movs	r3, #0
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	e023      	b.n	8005186 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4b15      	ldr	r3, [pc, #84]	@ (8005198 <xTaskCheckForTimeOut+0xc4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d007      	beq.n	800515a <xTaskCheckForTimeOut+0x86>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	429a      	cmp	r2, r3
 8005152:	d302      	bcc.n	800515a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005154:	2301      	movs	r3, #1
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	e015      	b.n	8005186 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	429a      	cmp	r2, r3
 8005162:	d20b      	bcs.n	800517c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	1ad2      	subs	r2, r2, r3
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7ff ff99 	bl	80050a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	e004      	b.n	8005186 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005182:	2301      	movs	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005186:	f000 fe89 	bl	8005e9c <vPortExitCritical>

	return xReturn;
 800518a:	69fb      	ldr	r3, [r7, #28]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3720      	adds	r7, #32
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	2000117c 	.word	0x2000117c
 8005198:	20001190 	.word	0x20001190

0800519c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051a0:	4b03      	ldr	r3, [pc, #12]	@ (80051b0 <vTaskMissedYield+0x14>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
}
 80051a6:	bf00      	nop
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	2000118c 	.word	0x2000118c

080051b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051bc:	f000 f852 	bl	8005264 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051c0:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <prvIdleTask+0x28>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d9f9      	bls.n	80051bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80051c8:	4b05      	ldr	r3, [pc, #20]	@ (80051e0 <prvIdleTask+0x2c>)
 80051ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051d8:	e7f0      	b.n	80051bc <prvIdleTask+0x8>
 80051da:	bf00      	nop
 80051dc:	20000ca8 	.word	0x20000ca8
 80051e0:	e000ed04 	.word	0xe000ed04

080051e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051ea:	2300      	movs	r3, #0
 80051ec:	607b      	str	r3, [r7, #4]
 80051ee:	e00c      	b.n	800520a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4a12      	ldr	r2, [pc, #72]	@ (8005244 <prvInitialiseTaskLists+0x60>)
 80051fc:	4413      	add	r3, r2
 80051fe:	4618      	mov	r0, r3
 8005200:	f7fe fcd6 	bl	8003bb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3301      	adds	r3, #1
 8005208:	607b      	str	r3, [r7, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b37      	cmp	r3, #55	@ 0x37
 800520e:	d9ef      	bls.n	80051f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005210:	480d      	ldr	r0, [pc, #52]	@ (8005248 <prvInitialiseTaskLists+0x64>)
 8005212:	f7fe fccd 	bl	8003bb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005216:	480d      	ldr	r0, [pc, #52]	@ (800524c <prvInitialiseTaskLists+0x68>)
 8005218:	f7fe fcca 	bl	8003bb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800521c:	480c      	ldr	r0, [pc, #48]	@ (8005250 <prvInitialiseTaskLists+0x6c>)
 800521e:	f7fe fcc7 	bl	8003bb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005222:	480c      	ldr	r0, [pc, #48]	@ (8005254 <prvInitialiseTaskLists+0x70>)
 8005224:	f7fe fcc4 	bl	8003bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005228:	480b      	ldr	r0, [pc, #44]	@ (8005258 <prvInitialiseTaskLists+0x74>)
 800522a:	f7fe fcc1 	bl	8003bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800522e:	4b0b      	ldr	r3, [pc, #44]	@ (800525c <prvInitialiseTaskLists+0x78>)
 8005230:	4a05      	ldr	r2, [pc, #20]	@ (8005248 <prvInitialiseTaskLists+0x64>)
 8005232:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005234:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <prvInitialiseTaskLists+0x7c>)
 8005236:	4a05      	ldr	r2, [pc, #20]	@ (800524c <prvInitialiseTaskLists+0x68>)
 8005238:	601a      	str	r2, [r3, #0]
}
 800523a:	bf00      	nop
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20000ca8 	.word	0x20000ca8
 8005248:	20001108 	.word	0x20001108
 800524c:	2000111c 	.word	0x2000111c
 8005250:	20001138 	.word	0x20001138
 8005254:	2000114c 	.word	0x2000114c
 8005258:	20001164 	.word	0x20001164
 800525c:	20001130 	.word	0x20001130
 8005260:	20001134 	.word	0x20001134

08005264 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800526a:	e019      	b.n	80052a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800526c:	f000 fde4 	bl	8005e38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005270:	4b10      	ldr	r3, [pc, #64]	@ (80052b4 <prvCheckTasksWaitingTermination+0x50>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3304      	adds	r3, #4
 800527c:	4618      	mov	r0, r3
 800527e:	f7fe fd21 	bl	8003cc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005282:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <prvCheckTasksWaitingTermination+0x54>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3b01      	subs	r3, #1
 8005288:	4a0b      	ldr	r2, [pc, #44]	@ (80052b8 <prvCheckTasksWaitingTermination+0x54>)
 800528a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800528c:	4b0b      	ldr	r3, [pc, #44]	@ (80052bc <prvCheckTasksWaitingTermination+0x58>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3b01      	subs	r3, #1
 8005292:	4a0a      	ldr	r2, [pc, #40]	@ (80052bc <prvCheckTasksWaitingTermination+0x58>)
 8005294:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005296:	f000 fe01 	bl	8005e9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f810 	bl	80052c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052a0:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <prvCheckTasksWaitingTermination+0x58>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1e1      	bne.n	800526c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	2000114c 	.word	0x2000114c
 80052b8:	20001178 	.word	0x20001178
 80052bc:	20001160 	.word	0x20001160

080052c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d108      	bne.n	80052e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 ff9e 	bl	8006218 <vPortFree>
				vPortFree( pxTCB );
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 ff9b 	bl	8006218 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052e2:	e019      	b.n	8005318 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d103      	bne.n	80052f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 ff92 	bl	8006218 <vPortFree>
	}
 80052f4:	e010      	b.n	8005318 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d00b      	beq.n	8005318 <prvDeleteTCB+0x58>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	60fb      	str	r3, [r7, #12]
}
 8005312:	bf00      	nop
 8005314:	bf00      	nop
 8005316:	e7fd      	b.n	8005314 <prvDeleteTCB+0x54>
	}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005326:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <prvResetNextTaskUnblockTime+0x38>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d104      	bne.n	800533a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005330:	4b0a      	ldr	r3, [pc, #40]	@ (800535c <prvResetNextTaskUnblockTime+0x3c>)
 8005332:	f04f 32ff 	mov.w	r2, #4294967295
 8005336:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005338:	e008      	b.n	800534c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800533a:	4b07      	ldr	r3, [pc, #28]	@ (8005358 <prvResetNextTaskUnblockTime+0x38>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4a04      	ldr	r2, [pc, #16]	@ (800535c <prvResetNextTaskUnblockTime+0x3c>)
 800534a:	6013      	str	r3, [r2, #0]
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	20001130 	.word	0x20001130
 800535c:	20001198 	.word	0x20001198

08005360 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005366:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <xTaskGetSchedulerState+0x34>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d102      	bne.n	8005374 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800536e:	2301      	movs	r3, #1
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	e008      	b.n	8005386 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005374:	4b08      	ldr	r3, [pc, #32]	@ (8005398 <xTaskGetSchedulerState+0x38>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d102      	bne.n	8005382 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800537c:	2302      	movs	r3, #2
 800537e:	607b      	str	r3, [r7, #4]
 8005380:	e001      	b.n	8005386 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005382:	2300      	movs	r3, #0
 8005384:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005386:	687b      	ldr	r3, [r7, #4]
	}
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	20001184 	.word	0x20001184
 8005398:	200011a0 	.word	0x200011a0

0800539c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d058      	beq.n	8005464 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005470 <xTaskPriorityDisinherit+0xd4>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d00b      	beq.n	80053d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	60fb      	str	r3, [r7, #12]
}
 80053ce:	bf00      	nop
 80053d0:	bf00      	nop
 80053d2:	e7fd      	b.n	80053d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10b      	bne.n	80053f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	60bb      	str	r3, [r7, #8]
}
 80053ee:	bf00      	nop
 80053f0:	bf00      	nop
 80053f2:	e7fd      	b.n	80053f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053f8:	1e5a      	subs	r2, r3, #1
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005406:	429a      	cmp	r2, r3
 8005408:	d02c      	beq.n	8005464 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800540e:	2b00      	cmp	r3, #0
 8005410:	d128      	bne.n	8005464 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	3304      	adds	r3, #4
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe fc54 	bl	8003cc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005428:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005434:	4b0f      	ldr	r3, [pc, #60]	@ (8005474 <xTaskPriorityDisinherit+0xd8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d903      	bls.n	8005444 <xTaskPriorityDisinherit+0xa8>
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005440:	4a0c      	ldr	r2, [pc, #48]	@ (8005474 <xTaskPriorityDisinherit+0xd8>)
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4a09      	ldr	r2, [pc, #36]	@ (8005478 <xTaskPriorityDisinherit+0xdc>)
 8005452:	441a      	add	r2, r3
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f7fe fbd5 	bl	8003c0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005460:	2301      	movs	r3, #1
 8005462:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005464:	697b      	ldr	r3, [r7, #20]
	}
 8005466:	4618      	mov	r0, r3
 8005468:	3718      	adds	r7, #24
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000ca4 	.word	0x20000ca4
 8005474:	20001180 	.word	0x20001180
 8005478:	20000ca8 	.word	0x20000ca8

0800547c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005486:	4b21      	ldr	r3, [pc, #132]	@ (800550c <prvAddCurrentTaskToDelayedList+0x90>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800548c:	4b20      	ldr	r3, [pc, #128]	@ (8005510 <prvAddCurrentTaskToDelayedList+0x94>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3304      	adds	r3, #4
 8005492:	4618      	mov	r0, r3
 8005494:	f7fe fc16 	bl	8003cc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d10a      	bne.n	80054b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005510 <prvAddCurrentTaskToDelayedList+0x94>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3304      	adds	r3, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4819      	ldr	r0, [pc, #100]	@ (8005514 <prvAddCurrentTaskToDelayedList+0x98>)
 80054b0:	f7fe fbab 	bl	8003c0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054b4:	e026      	b.n	8005504 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4413      	add	r3, r2
 80054bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054be:	4b14      	ldr	r3, [pc, #80]	@ (8005510 <prvAddCurrentTaskToDelayedList+0x94>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d209      	bcs.n	80054e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054ce:	4b12      	ldr	r3, [pc, #72]	@ (8005518 <prvAddCurrentTaskToDelayedList+0x9c>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005510 <prvAddCurrentTaskToDelayedList+0x94>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4619      	mov	r1, r3
 80054da:	4610      	mov	r0, r2
 80054dc:	f7fe fbb9 	bl	8003c52 <vListInsert>
}
 80054e0:	e010      	b.n	8005504 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e2:	4b0e      	ldr	r3, [pc, #56]	@ (800551c <prvAddCurrentTaskToDelayedList+0xa0>)
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005510 <prvAddCurrentTaskToDelayedList+0x94>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3304      	adds	r3, #4
 80054ec:	4619      	mov	r1, r3
 80054ee:	4610      	mov	r0, r2
 80054f0:	f7fe fbaf 	bl	8003c52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005520 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d202      	bcs.n	8005504 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80054fe:	4a08      	ldr	r2, [pc, #32]	@ (8005520 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	6013      	str	r3, [r2, #0]
}
 8005504:	bf00      	nop
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	2000117c 	.word	0x2000117c
 8005510:	20000ca4 	.word	0x20000ca4
 8005514:	20001164 	.word	0x20001164
 8005518:	20001134 	.word	0x20001134
 800551c:	20001130 	.word	0x20001130
 8005520:	20001198 	.word	0x20001198

08005524 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	@ 0x28
 8005528:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800552e:	f000 fb13 	bl	8005b58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005532:	4b1d      	ldr	r3, [pc, #116]	@ (80055a8 <xTimerCreateTimerTask+0x84>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d021      	beq.n	800557e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800553e:	2300      	movs	r3, #0
 8005540:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005542:	1d3a      	adds	r2, r7, #4
 8005544:	f107 0108 	add.w	r1, r7, #8
 8005548:	f107 030c 	add.w	r3, r7, #12
 800554c:	4618      	mov	r0, r3
 800554e:	f7fe fb15 	bl	8003b7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	9202      	str	r2, [sp, #8]
 800555a:	9301      	str	r3, [sp, #4]
 800555c:	2302      	movs	r3, #2
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	2300      	movs	r3, #0
 8005562:	460a      	mov	r2, r1
 8005564:	4911      	ldr	r1, [pc, #68]	@ (80055ac <xTimerCreateTimerTask+0x88>)
 8005566:	4812      	ldr	r0, [pc, #72]	@ (80055b0 <xTimerCreateTimerTask+0x8c>)
 8005568:	f7ff f8d0 	bl	800470c <xTaskCreateStatic>
 800556c:	4603      	mov	r3, r0
 800556e:	4a11      	ldr	r2, [pc, #68]	@ (80055b4 <xTimerCreateTimerTask+0x90>)
 8005570:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005572:	4b10      	ldr	r3, [pc, #64]	@ (80055b4 <xTimerCreateTimerTask+0x90>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800557a:	2301      	movs	r3, #1
 800557c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10b      	bne.n	800559c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	613b      	str	r3, [r7, #16]
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	e7fd      	b.n	8005598 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800559c:	697b      	ldr	r3, [r7, #20]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	200011d4 	.word	0x200011d4
 80055ac:	080064f8 	.word	0x080064f8
 80055b0:	080056f1 	.word	0x080056f1
 80055b4:	200011d8 	.word	0x200011d8

080055b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	@ 0x28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10b      	bne.n	80055e8 <xTimerGenericCommand+0x30>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	623b      	str	r3, [r7, #32]
}
 80055e2:	bf00      	nop
 80055e4:	bf00      	nop
 80055e6:	e7fd      	b.n	80055e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055e8:	4b19      	ldr	r3, [pc, #100]	@ (8005650 <xTimerGenericCommand+0x98>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d02a      	beq.n	8005646 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b05      	cmp	r3, #5
 8005600:	dc18      	bgt.n	8005634 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005602:	f7ff fead 	bl	8005360 <xTaskGetSchedulerState>
 8005606:	4603      	mov	r3, r0
 8005608:	2b02      	cmp	r3, #2
 800560a:	d109      	bne.n	8005620 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800560c:	4b10      	ldr	r3, [pc, #64]	@ (8005650 <xTimerGenericCommand+0x98>)
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	f107 0110 	add.w	r1, r7, #16
 8005614:	2300      	movs	r3, #0
 8005616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005618:	f7fe fc88 	bl	8003f2c <xQueueGenericSend>
 800561c:	6278      	str	r0, [r7, #36]	@ 0x24
 800561e:	e012      	b.n	8005646 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005620:	4b0b      	ldr	r3, [pc, #44]	@ (8005650 <xTimerGenericCommand+0x98>)
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	f107 0110 	add.w	r1, r7, #16
 8005628:	2300      	movs	r3, #0
 800562a:	2200      	movs	r2, #0
 800562c:	f7fe fc7e 	bl	8003f2c <xQueueGenericSend>
 8005630:	6278      	str	r0, [r7, #36]	@ 0x24
 8005632:	e008      	b.n	8005646 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005634:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <xTimerGenericCommand+0x98>)
 8005636:	6818      	ldr	r0, [r3, #0]
 8005638:	f107 0110 	add.w	r1, r7, #16
 800563c:	2300      	movs	r3, #0
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	f7fe fd76 	bl	8004130 <xQueueGenericSendFromISR>
 8005644:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005648:	4618      	mov	r0, r3
 800564a:	3728      	adds	r7, #40	@ 0x28
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	200011d4 	.word	0x200011d4

08005654 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af02      	add	r7, sp, #8
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800565e:	4b23      	ldr	r3, [pc, #140]	@ (80056ec <prvProcessExpiredTimer+0x98>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	3304      	adds	r3, #4
 800566c:	4618      	mov	r0, r3
 800566e:	f7fe fb29 	bl	8003cc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d023      	beq.n	80056c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	699a      	ldr	r2, [r3, #24]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	18d1      	adds	r1, r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	6978      	ldr	r0, [r7, #20]
 800568e:	f000 f8d5 	bl	800583c <prvInsertTimerInActiveList>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d020      	beq.n	80056da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005698:	2300      	movs	r3, #0
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	2300      	movs	r3, #0
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	2100      	movs	r1, #0
 80056a2:	6978      	ldr	r0, [r7, #20]
 80056a4:	f7ff ff88 	bl	80055b8 <xTimerGenericCommand>
 80056a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d114      	bne.n	80056da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	60fb      	str	r3, [r7, #12]
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056ce:	f023 0301 	bic.w	r3, r3, #1
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	6978      	ldr	r0, [r7, #20]
 80056e0:	4798      	blx	r3
}
 80056e2:	bf00      	nop
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	200011cc 	.word	0x200011cc

080056f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056f8:	f107 0308 	add.w	r3, r7, #8
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 f859 	bl	80057b4 <prvGetNextExpireTime>
 8005702:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4619      	mov	r1, r3
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f805 	bl	8005718 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800570e:	f000 f8d7 	bl	80058c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005712:	bf00      	nop
 8005714:	e7f0      	b.n	80056f8 <prvTimerTask+0x8>
	...

08005718 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005722:	f7ff fa37 	bl	8004b94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005726:	f107 0308 	add.w	r3, r7, #8
 800572a:	4618      	mov	r0, r3
 800572c:	f000 f866 	bl	80057fc <prvSampleTimeNow>
 8005730:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d130      	bne.n	800579a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10a      	bne.n	8005754 <prvProcessTimerOrBlockTask+0x3c>
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	429a      	cmp	r2, r3
 8005744:	d806      	bhi.n	8005754 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005746:	f7ff fa33 	bl	8004bb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800574a:	68f9      	ldr	r1, [r7, #12]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff ff81 	bl	8005654 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005752:	e024      	b.n	800579e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d008      	beq.n	800576c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800575a:	4b13      	ldr	r3, [pc, #76]	@ (80057a8 <prvProcessTimerOrBlockTask+0x90>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <prvProcessTimerOrBlockTask+0x50>
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <prvProcessTimerOrBlockTask+0x52>
 8005768:	2300      	movs	r3, #0
 800576a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800576c:	4b0f      	ldr	r3, [pc, #60]	@ (80057ac <prvProcessTimerOrBlockTask+0x94>)
 800576e:	6818      	ldr	r0, [r3, #0]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	4619      	mov	r1, r3
 800577a:	f7fe ff93 	bl	80046a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800577e:	f7ff fa17 	bl	8004bb0 <xTaskResumeAll>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10a      	bne.n	800579e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005788:	4b09      	ldr	r3, [pc, #36]	@ (80057b0 <prvProcessTimerOrBlockTask+0x98>)
 800578a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	f3bf 8f6f 	isb	sy
}
 8005798:	e001      	b.n	800579e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800579a:	f7ff fa09 	bl	8004bb0 <xTaskResumeAll>
}
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	200011d0 	.word	0x200011d0
 80057ac:	200011d4 	.word	0x200011d4
 80057b0:	e000ed04 	.word	0xe000ed04

080057b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057bc:	4b0e      	ldr	r3, [pc, #56]	@ (80057f8 <prvGetNextExpireTime+0x44>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <prvGetNextExpireTime+0x16>
 80057c6:	2201      	movs	r2, #1
 80057c8:	e000      	b.n	80057cc <prvGetNextExpireTime+0x18>
 80057ca:	2200      	movs	r2, #0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057d8:	4b07      	ldr	r3, [pc, #28]	@ (80057f8 <prvGetNextExpireTime+0x44>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	e001      	b.n	80057e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057e8:	68fb      	ldr	r3, [r7, #12]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	200011cc 	.word	0x200011cc

080057fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005804:	f7ff fa72 	bl	8004cec <xTaskGetTickCount>
 8005808:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800580a:	4b0b      	ldr	r3, [pc, #44]	@ (8005838 <prvSampleTimeNow+0x3c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	429a      	cmp	r2, r3
 8005812:	d205      	bcs.n	8005820 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005814:	f000 f93a 	bl	8005a8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e002      	b.n	8005826 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005826:	4a04      	ldr	r2, [pc, #16]	@ (8005838 <prvSampleTimeNow+0x3c>)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800582c:	68fb      	ldr	r3, [r7, #12]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	200011dc 	.word	0x200011dc

0800583c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	429a      	cmp	r2, r3
 8005860:	d812      	bhi.n	8005888 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	1ad2      	subs	r2, r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	429a      	cmp	r2, r3
 800586e:	d302      	bcc.n	8005876 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005870:	2301      	movs	r3, #1
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	e01b      	b.n	80058ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005876:	4b10      	ldr	r3, [pc, #64]	@ (80058b8 <prvInsertTimerInActiveList+0x7c>)
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3304      	adds	r3, #4
 800587e:	4619      	mov	r1, r3
 8005880:	4610      	mov	r0, r2
 8005882:	f7fe f9e6 	bl	8003c52 <vListInsert>
 8005886:	e012      	b.n	80058ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	429a      	cmp	r2, r3
 800588e:	d206      	bcs.n	800589e <prvInsertTimerInActiveList+0x62>
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d302      	bcc.n	800589e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005898:	2301      	movs	r3, #1
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	e007      	b.n	80058ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800589e:	4b07      	ldr	r3, [pc, #28]	@ (80058bc <prvInsertTimerInActiveList+0x80>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3304      	adds	r3, #4
 80058a6:	4619      	mov	r1, r3
 80058a8:	4610      	mov	r0, r2
 80058aa:	f7fe f9d2 	bl	8003c52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058ae:	697b      	ldr	r3, [r7, #20]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	200011d0 	.word	0x200011d0
 80058bc:	200011cc 	.word	0x200011cc

080058c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08e      	sub	sp, #56	@ 0x38
 80058c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058c6:	e0ce      	b.n	8005a66 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	da19      	bge.n	8005902 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	3304      	adds	r3, #4
 80058d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10b      	bne.n	80058f2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	61fb      	str	r3, [r7, #28]
}
 80058ec:	bf00      	nop
 80058ee:	bf00      	nop
 80058f0:	e7fd      	b.n	80058ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058f8:	6850      	ldr	r0, [r2, #4]
 80058fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058fc:	6892      	ldr	r2, [r2, #8]
 80058fe:	4611      	mov	r1, r2
 8005900:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f2c0 80ae 	blt.w	8005a66 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800590e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d004      	beq.n	8005920 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005918:	3304      	adds	r3, #4
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe f9d2 	bl	8003cc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005920:	463b      	mov	r3, r7
 8005922:	4618      	mov	r0, r3
 8005924:	f7ff ff6a 	bl	80057fc <prvSampleTimeNow>
 8005928:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b09      	cmp	r3, #9
 800592e:	f200 8097 	bhi.w	8005a60 <prvProcessReceivedCommands+0x1a0>
 8005932:	a201      	add	r2, pc, #4	@ (adr r2, 8005938 <prvProcessReceivedCommands+0x78>)
 8005934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005938:	08005961 	.word	0x08005961
 800593c:	08005961 	.word	0x08005961
 8005940:	08005961 	.word	0x08005961
 8005944:	080059d7 	.word	0x080059d7
 8005948:	080059eb 	.word	0x080059eb
 800594c:	08005a37 	.word	0x08005a37
 8005950:	08005961 	.word	0x08005961
 8005954:	08005961 	.word	0x08005961
 8005958:	080059d7 	.word	0x080059d7
 800595c:	080059eb 	.word	0x080059eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005962:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005966:	f043 0301 	orr.w	r3, r3, #1
 800596a:	b2da      	uxtb	r2, r3
 800596c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	18d1      	adds	r1, r2, r3
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800597e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005980:	f7ff ff5c 	bl	800583c <prvInsertTimerInActiveList>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d06c      	beq.n	8005a64 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800598a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005990:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d061      	beq.n	8005a64 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	441a      	add	r2, r3
 80059a8:	2300      	movs	r3, #0
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	2300      	movs	r3, #0
 80059ae:	2100      	movs	r1, #0
 80059b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059b2:	f7ff fe01 	bl	80055b8 <xTimerGenericCommand>
 80059b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d152      	bne.n	8005a64 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	61bb      	str	r3, [r7, #24]
}
 80059d0:	bf00      	nop
 80059d2:	bf00      	nop
 80059d4:	e7fd      	b.n	80059d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80059e8:	e03d      	b.n	8005a66 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059f0:	f043 0301 	orr.w	r3, r3, #1
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10b      	bne.n	8005a22 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	617b      	str	r3, [r7, #20]
}
 8005a1c:	bf00      	nop
 8005a1e:	bf00      	nop
 8005a20:	e7fd      	b.n	8005a1e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	18d1      	adds	r1, r2, r3
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a30:	f7ff ff04 	bl	800583c <prvInsertTimerInActiveList>
					break;
 8005a34:	e017      	b.n	8005a66 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d103      	bne.n	8005a4c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005a44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a46:	f000 fbe7 	bl	8006218 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a4a:	e00c      	b.n	8005a66 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a52:	f023 0301 	bic.w	r3, r3, #1
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005a5e:	e002      	b.n	8005a66 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005a60:	bf00      	nop
 8005a62:	e000      	b.n	8005a66 <prvProcessReceivedCommands+0x1a6>
					break;
 8005a64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a66:	4b08      	ldr	r3, [pc, #32]	@ (8005a88 <prvProcessReceivedCommands+0x1c8>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	1d39      	adds	r1, r7, #4
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe fbfc 	bl	800426c <xQueueReceive>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f47f af26 	bne.w	80058c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	3730      	adds	r7, #48	@ 0x30
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	200011d4 	.word	0x200011d4

08005a8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a92:	e049      	b.n	8005b28 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a94:	4b2e      	ldr	r3, [pc, #184]	@ (8005b50 <prvSwitchTimerLists+0xc4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8005b50 <prvSwitchTimerLists+0xc4>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fe f909 	bl	8003cc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d02f      	beq.n	8005b28 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4413      	add	r3, r2
 8005ad0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d90e      	bls.n	8005af8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b50 <prvSwitchTimerLists+0xc4>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3304      	adds	r3, #4
 8005aee:	4619      	mov	r1, r3
 8005af0:	4610      	mov	r0, r2
 8005af2:	f7fe f8ae 	bl	8003c52 <vListInsert>
 8005af6:	e017      	b.n	8005b28 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005af8:	2300      	movs	r3, #0
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	2300      	movs	r3, #0
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	2100      	movs	r1, #0
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7ff fd58 	bl	80055b8 <xTimerGenericCommand>
 8005b08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10b      	bne.n	8005b28 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	603b      	str	r3, [r7, #0]
}
 8005b22:	bf00      	nop
 8005b24:	bf00      	nop
 8005b26:	e7fd      	b.n	8005b24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b28:	4b09      	ldr	r3, [pc, #36]	@ (8005b50 <prvSwitchTimerLists+0xc4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1b0      	bne.n	8005a94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b32:	4b07      	ldr	r3, [pc, #28]	@ (8005b50 <prvSwitchTimerLists+0xc4>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b38:	4b06      	ldr	r3, [pc, #24]	@ (8005b54 <prvSwitchTimerLists+0xc8>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a04      	ldr	r2, [pc, #16]	@ (8005b50 <prvSwitchTimerLists+0xc4>)
 8005b3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b40:	4a04      	ldr	r2, [pc, #16]	@ (8005b54 <prvSwitchTimerLists+0xc8>)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	6013      	str	r3, [r2, #0]
}
 8005b46:	bf00      	nop
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	200011cc 	.word	0x200011cc
 8005b54:	200011d0 	.word	0x200011d0

08005b58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b5e:	f000 f96b 	bl	8005e38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b62:	4b15      	ldr	r3, [pc, #84]	@ (8005bb8 <prvCheckForValidListAndQueue+0x60>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d120      	bne.n	8005bac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b6a:	4814      	ldr	r0, [pc, #80]	@ (8005bbc <prvCheckForValidListAndQueue+0x64>)
 8005b6c:	f7fe f820 	bl	8003bb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b70:	4813      	ldr	r0, [pc, #76]	@ (8005bc0 <prvCheckForValidListAndQueue+0x68>)
 8005b72:	f7fe f81d 	bl	8003bb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b76:	4b13      	ldr	r3, [pc, #76]	@ (8005bc4 <prvCheckForValidListAndQueue+0x6c>)
 8005b78:	4a10      	ldr	r2, [pc, #64]	@ (8005bbc <prvCheckForValidListAndQueue+0x64>)
 8005b7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b7c:	4b12      	ldr	r3, [pc, #72]	@ (8005bc8 <prvCheckForValidListAndQueue+0x70>)
 8005b7e:	4a10      	ldr	r2, [pc, #64]	@ (8005bc0 <prvCheckForValidListAndQueue+0x68>)
 8005b80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b82:	2300      	movs	r3, #0
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	4b11      	ldr	r3, [pc, #68]	@ (8005bcc <prvCheckForValidListAndQueue+0x74>)
 8005b88:	4a11      	ldr	r2, [pc, #68]	@ (8005bd0 <prvCheckForValidListAndQueue+0x78>)
 8005b8a:	2110      	movs	r1, #16
 8005b8c:	200a      	movs	r0, #10
 8005b8e:	f7fe f92d 	bl	8003dec <xQueueGenericCreateStatic>
 8005b92:	4603      	mov	r3, r0
 8005b94:	4a08      	ldr	r2, [pc, #32]	@ (8005bb8 <prvCheckForValidListAndQueue+0x60>)
 8005b96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b98:	4b07      	ldr	r3, [pc, #28]	@ (8005bb8 <prvCheckForValidListAndQueue+0x60>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d005      	beq.n	8005bac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ba0:	4b05      	ldr	r3, [pc, #20]	@ (8005bb8 <prvCheckForValidListAndQueue+0x60>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	490b      	ldr	r1, [pc, #44]	@ (8005bd4 <prvCheckForValidListAndQueue+0x7c>)
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe fd52 	bl	8004650 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bac:	f000 f976 	bl	8005e9c <vPortExitCritical>
}
 8005bb0:	bf00      	nop
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	200011d4 	.word	0x200011d4
 8005bbc:	200011a4 	.word	0x200011a4
 8005bc0:	200011b8 	.word	0x200011b8
 8005bc4:	200011cc 	.word	0x200011cc
 8005bc8:	200011d0 	.word	0x200011d0
 8005bcc:	20001280 	.word	0x20001280
 8005bd0:	200011e0 	.word	0x200011e0
 8005bd4:	08006500 	.word	0x08006500

08005bd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3b04      	subs	r3, #4
 8005be8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3b04      	subs	r3, #4
 8005bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f023 0201 	bic.w	r2, r3, #1
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3b04      	subs	r3, #4
 8005c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c08:	4a0c      	ldr	r2, [pc, #48]	@ (8005c3c <pxPortInitialiseStack+0x64>)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3b14      	subs	r3, #20
 8005c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3b04      	subs	r3, #4
 8005c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f06f 0202 	mvn.w	r2, #2
 8005c26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3b20      	subs	r3, #32
 8005c2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	08005c41 	.word	0x08005c41

08005c40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c4a:	4b13      	ldr	r3, [pc, #76]	@ (8005c98 <prvTaskExitError+0x58>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	d00b      	beq.n	8005c6c <prvTaskExitError+0x2c>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	60fb      	str	r3, [r7, #12]
}
 8005c66:	bf00      	nop
 8005c68:	bf00      	nop
 8005c6a:	e7fd      	b.n	8005c68 <prvTaskExitError+0x28>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	60bb      	str	r3, [r7, #8]
}
 8005c7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c80:	bf00      	nop
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d0fc      	beq.n	8005c82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c88:	bf00      	nop
 8005c8a:	bf00      	nop
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	2000000c 	.word	0x2000000c
 8005c9c:	00000000 	.word	0x00000000

08005ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ca0:	4b07      	ldr	r3, [pc, #28]	@ (8005cc0 <pxCurrentTCBConst2>)
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	6808      	ldr	r0, [r1, #0]
 8005ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005caa:	f380 8809 	msr	PSP, r0
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f380 8811 	msr	BASEPRI, r0
 8005cba:	4770      	bx	lr
 8005cbc:	f3af 8000 	nop.w

08005cc0 <pxCurrentTCBConst2>:
 8005cc0:	20000ca4 	.word	0x20000ca4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cc4:	bf00      	nop
 8005cc6:	bf00      	nop

08005cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005cc8:	4808      	ldr	r0, [pc, #32]	@ (8005cec <prvPortStartFirstTask+0x24>)
 8005cca:	6800      	ldr	r0, [r0, #0]
 8005ccc:	6800      	ldr	r0, [r0, #0]
 8005cce:	f380 8808 	msr	MSP, r0
 8005cd2:	f04f 0000 	mov.w	r0, #0
 8005cd6:	f380 8814 	msr	CONTROL, r0
 8005cda:	b662      	cpsie	i
 8005cdc:	b661      	cpsie	f
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	df00      	svc	0
 8005ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cea:	bf00      	nop
 8005cec:	e000ed08 	.word	0xe000ed08

08005cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005cf6:	4b47      	ldr	r3, [pc, #284]	@ (8005e14 <xPortStartScheduler+0x124>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a47      	ldr	r2, [pc, #284]	@ (8005e18 <xPortStartScheduler+0x128>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10b      	bne.n	8005d18 <xPortStartScheduler+0x28>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	613b      	str	r3, [r7, #16]
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	e7fd      	b.n	8005d14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d18:	4b3e      	ldr	r3, [pc, #248]	@ (8005e14 <xPortStartScheduler+0x124>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a3f      	ldr	r2, [pc, #252]	@ (8005e1c <xPortStartScheduler+0x12c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d10b      	bne.n	8005d3a <xPortStartScheduler+0x4a>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	60fb      	str	r3, [r7, #12]
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	e7fd      	b.n	8005d36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d3a:	4b39      	ldr	r3, [pc, #228]	@ (8005e20 <xPortStartScheduler+0x130>)
 8005d3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	22ff      	movs	r2, #255	@ 0xff
 8005d4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	4b31      	ldr	r3, [pc, #196]	@ (8005e24 <xPortStartScheduler+0x134>)
 8005d60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d62:	4b31      	ldr	r3, [pc, #196]	@ (8005e28 <xPortStartScheduler+0x138>)
 8005d64:	2207      	movs	r2, #7
 8005d66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d68:	e009      	b.n	8005d7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005e28 <xPortStartScheduler+0x138>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	4a2d      	ldr	r2, [pc, #180]	@ (8005e28 <xPortStartScheduler+0x138>)
 8005d72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d86:	2b80      	cmp	r3, #128	@ 0x80
 8005d88:	d0ef      	beq.n	8005d6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d8a:	4b27      	ldr	r3, [pc, #156]	@ (8005e28 <xPortStartScheduler+0x138>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f1c3 0307 	rsb	r3, r3, #7
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d00b      	beq.n	8005dae <xPortStartScheduler+0xbe>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	60bb      	str	r3, [r7, #8]
}
 8005da8:	bf00      	nop
 8005daa:	bf00      	nop
 8005dac:	e7fd      	b.n	8005daa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dae:	4b1e      	ldr	r3, [pc, #120]	@ (8005e28 <xPortStartScheduler+0x138>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e28 <xPortStartScheduler+0x138>)
 8005db6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005db8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e28 <xPortStartScheduler+0x138>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005dc0:	4a19      	ldr	r2, [pc, #100]	@ (8005e28 <xPortStartScheduler+0x138>)
 8005dc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005dcc:	4b17      	ldr	r3, [pc, #92]	@ (8005e2c <xPortStartScheduler+0x13c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a16      	ldr	r2, [pc, #88]	@ (8005e2c <xPortStartScheduler+0x13c>)
 8005dd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005dd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dd8:	4b14      	ldr	r3, [pc, #80]	@ (8005e2c <xPortStartScheduler+0x13c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a13      	ldr	r2, [pc, #76]	@ (8005e2c <xPortStartScheduler+0x13c>)
 8005dde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005de2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005de4:	f000 f8da 	bl	8005f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005de8:	4b11      	ldr	r3, [pc, #68]	@ (8005e30 <xPortStartScheduler+0x140>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005dee:	f000 f8f9 	bl	8005fe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005df2:	4b10      	ldr	r3, [pc, #64]	@ (8005e34 <xPortStartScheduler+0x144>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a0f      	ldr	r2, [pc, #60]	@ (8005e34 <xPortStartScheduler+0x144>)
 8005df8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005dfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005dfe:	f7ff ff63 	bl	8005cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e02:	f7ff f83d 	bl	8004e80 <vTaskSwitchContext>
	prvTaskExitError();
 8005e06:	f7ff ff1b 	bl	8005c40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	e000ed00 	.word	0xe000ed00
 8005e18:	410fc271 	.word	0x410fc271
 8005e1c:	410fc270 	.word	0x410fc270
 8005e20:	e000e400 	.word	0xe000e400
 8005e24:	200012d0 	.word	0x200012d0
 8005e28:	200012d4 	.word	0x200012d4
 8005e2c:	e000ed20 	.word	0xe000ed20
 8005e30:	2000000c 	.word	0x2000000c
 8005e34:	e000ef34 	.word	0xe000ef34

08005e38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	607b      	str	r3, [r7, #4]
}
 8005e50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e52:	4b10      	ldr	r3, [pc, #64]	@ (8005e94 <vPortEnterCritical+0x5c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3301      	adds	r3, #1
 8005e58:	4a0e      	ldr	r2, [pc, #56]	@ (8005e94 <vPortEnterCritical+0x5c>)
 8005e5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e94 <vPortEnterCritical+0x5c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d110      	bne.n	8005e86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e64:	4b0c      	ldr	r3, [pc, #48]	@ (8005e98 <vPortEnterCritical+0x60>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <vPortEnterCritical+0x4e>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	603b      	str	r3, [r7, #0]
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	e7fd      	b.n	8005e82 <vPortEnterCritical+0x4a>
	}
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	2000000c 	.word	0x2000000c
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ea2:	4b12      	ldr	r3, [pc, #72]	@ (8005eec <vPortExitCritical+0x50>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10b      	bne.n	8005ec2 <vPortExitCritical+0x26>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	607b      	str	r3, [r7, #4]
}
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	e7fd      	b.n	8005ebe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8005eec <vPortExitCritical+0x50>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	4a08      	ldr	r2, [pc, #32]	@ (8005eec <vPortExitCritical+0x50>)
 8005eca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ecc:	4b07      	ldr	r3, [pc, #28]	@ (8005eec <vPortExitCritical+0x50>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d105      	bne.n	8005ee0 <vPortExitCritical+0x44>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	f383 8811 	msr	BASEPRI, r3
}
 8005ede:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	2000000c 	.word	0x2000000c

08005ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ef0:	f3ef 8009 	mrs	r0, PSP
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	4b15      	ldr	r3, [pc, #84]	@ (8005f50 <pxCurrentTCBConst>)
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	f01e 0f10 	tst.w	lr, #16
 8005f00:	bf08      	it	eq
 8005f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0a:	6010      	str	r0, [r2, #0]
 8005f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005f14:	f380 8811 	msr	BASEPRI, r0
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f7fe ffae 	bl	8004e80 <vTaskSwitchContext>
 8005f24:	f04f 0000 	mov.w	r0, #0
 8005f28:	f380 8811 	msr	BASEPRI, r0
 8005f2c:	bc09      	pop	{r0, r3}
 8005f2e:	6819      	ldr	r1, [r3, #0]
 8005f30:	6808      	ldr	r0, [r1, #0]
 8005f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f36:	f01e 0f10 	tst.w	lr, #16
 8005f3a:	bf08      	it	eq
 8005f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f40:	f380 8809 	msr	PSP, r0
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	f3af 8000 	nop.w

08005f50 <pxCurrentTCBConst>:
 8005f50:	20000ca4 	.word	0x20000ca4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop

08005f58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	607b      	str	r3, [r7, #4]
}
 8005f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f72:	f7fe fecb 	bl	8004d0c <xTaskIncrementTick>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f7c:	4b06      	ldr	r3, [pc, #24]	@ (8005f98 <xPortSysTickHandler+0x40>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	2300      	movs	r3, #0
 8005f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	f383 8811 	msr	BASEPRI, r3
}
 8005f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	e000ed04 	.word	0xe000ed04

08005f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd0 <vPortSetupTimerInterrupt+0x34>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd4 <vPortSetupTimerInterrupt+0x38>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fac:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd8 <vPortSetupTimerInterrupt+0x3c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8005fdc <vPortSetupTimerInterrupt+0x40>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	099b      	lsrs	r3, r3, #6
 8005fb8:	4a09      	ldr	r2, [pc, #36]	@ (8005fe0 <vPortSetupTimerInterrupt+0x44>)
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fbe:	4b04      	ldr	r3, [pc, #16]	@ (8005fd0 <vPortSetupTimerInterrupt+0x34>)
 8005fc0:	2207      	movs	r2, #7
 8005fc2:	601a      	str	r2, [r3, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	e000e010 	.word	0xe000e010
 8005fd4:	e000e018 	.word	0xe000e018
 8005fd8:	20000000 	.word	0x20000000
 8005fdc:	10624dd3 	.word	0x10624dd3
 8005fe0:	e000e014 	.word	0xe000e014

08005fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005ff4 <vPortEnableVFP+0x10>
 8005fe8:	6801      	ldr	r1, [r0, #0]
 8005fea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005fee:	6001      	str	r1, [r0, #0]
 8005ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ff2:	bf00      	nop
 8005ff4:	e000ed88 	.word	0xe000ed88

08005ff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ffe:	f3ef 8305 	mrs	r3, IPSR
 8006002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b0f      	cmp	r3, #15
 8006008:	d915      	bls.n	8006036 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800600a:	4a18      	ldr	r2, [pc, #96]	@ (800606c <vPortValidateInterruptPriority+0x74>)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006014:	4b16      	ldr	r3, [pc, #88]	@ (8006070 <vPortValidateInterruptPriority+0x78>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	7afa      	ldrb	r2, [r7, #11]
 800601a:	429a      	cmp	r2, r3
 800601c:	d20b      	bcs.n	8006036 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	607b      	str	r3, [r7, #4]
}
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	e7fd      	b.n	8006032 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006036:	4b0f      	ldr	r3, [pc, #60]	@ (8006074 <vPortValidateInterruptPriority+0x7c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800603e:	4b0e      	ldr	r3, [pc, #56]	@ (8006078 <vPortValidateInterruptPriority+0x80>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d90b      	bls.n	800605e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	603b      	str	r3, [r7, #0]
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	e7fd      	b.n	800605a <vPortValidateInterruptPriority+0x62>
	}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	e000e3f0 	.word	0xe000e3f0
 8006070:	200012d0 	.word	0x200012d0
 8006074:	e000ed0c 	.word	0xe000ed0c
 8006078:	200012d4 	.word	0x200012d4

0800607c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	@ 0x28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006084:	2300      	movs	r3, #0
 8006086:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006088:	f7fe fd84 	bl	8004b94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800608c:	4b5c      	ldr	r3, [pc, #368]	@ (8006200 <pvPortMalloc+0x184>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006094:	f000 f924 	bl	80062e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006098:	4b5a      	ldr	r3, [pc, #360]	@ (8006204 <pvPortMalloc+0x188>)
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4013      	ands	r3, r2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f040 8095 	bne.w	80061d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d01e      	beq.n	80060ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80060ac:	2208      	movs	r2, #8
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4413      	add	r3, r2
 80060b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d015      	beq.n	80060ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f023 0307 	bic.w	r3, r3, #7
 80060c4:	3308      	adds	r3, #8
 80060c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f003 0307 	and.w	r3, r3, #7
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00b      	beq.n	80060ea <pvPortMalloc+0x6e>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	617b      	str	r3, [r7, #20]
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop
 80060e8:	e7fd      	b.n	80060e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d06f      	beq.n	80061d0 <pvPortMalloc+0x154>
 80060f0:	4b45      	ldr	r3, [pc, #276]	@ (8006208 <pvPortMalloc+0x18c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d86a      	bhi.n	80061d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060fa:	4b44      	ldr	r3, [pc, #272]	@ (800620c <pvPortMalloc+0x190>)
 80060fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060fe:	4b43      	ldr	r3, [pc, #268]	@ (800620c <pvPortMalloc+0x190>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006104:	e004      	b.n	8006110 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	429a      	cmp	r2, r3
 8006118:	d903      	bls.n	8006122 <pvPortMalloc+0xa6>
 800611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f1      	bne.n	8006106 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006122:	4b37      	ldr	r3, [pc, #220]	@ (8006200 <pvPortMalloc+0x184>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006128:	429a      	cmp	r2, r3
 800612a:	d051      	beq.n	80061d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2208      	movs	r2, #8
 8006132:	4413      	add	r3, r2
 8006134:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	1ad2      	subs	r2, r2, r3
 8006146:	2308      	movs	r3, #8
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	429a      	cmp	r2, r3
 800614c:	d920      	bls.n	8006190 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800614e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4413      	add	r3, r2
 8006154:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00b      	beq.n	8006178 <pvPortMalloc+0xfc>
	__asm volatile
 8006160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	613b      	str	r3, [r7, #16]
}
 8006172:	bf00      	nop
 8006174:	bf00      	nop
 8006176:	e7fd      	b.n	8006174 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	1ad2      	subs	r2, r2, r3
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800618a:	69b8      	ldr	r0, [r7, #24]
 800618c:	f000 f90a 	bl	80063a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006190:	4b1d      	ldr	r3, [pc, #116]	@ (8006208 <pvPortMalloc+0x18c>)
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	4a1b      	ldr	r2, [pc, #108]	@ (8006208 <pvPortMalloc+0x18c>)
 800619c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800619e:	4b1a      	ldr	r3, [pc, #104]	@ (8006208 <pvPortMalloc+0x18c>)
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006210 <pvPortMalloc+0x194>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d203      	bcs.n	80061b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061aa:	4b17      	ldr	r3, [pc, #92]	@ (8006208 <pvPortMalloc+0x18c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a18      	ldr	r2, [pc, #96]	@ (8006210 <pvPortMalloc+0x194>)
 80061b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	4b13      	ldr	r3, [pc, #76]	@ (8006204 <pvPortMalloc+0x188>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	431a      	orrs	r2, r3
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80061c6:	4b13      	ldr	r3, [pc, #76]	@ (8006214 <pvPortMalloc+0x198>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3301      	adds	r3, #1
 80061cc:	4a11      	ldr	r2, [pc, #68]	@ (8006214 <pvPortMalloc+0x198>)
 80061ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061d0:	f7fe fcee 	bl	8004bb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00b      	beq.n	80061f6 <pvPortMalloc+0x17a>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	60fb      	str	r3, [r7, #12]
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	e7fd      	b.n	80061f2 <pvPortMalloc+0x176>
	return pvReturn;
 80061f6:	69fb      	ldr	r3, [r7, #28]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3728      	adds	r7, #40	@ 0x28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	20004ee0 	.word	0x20004ee0
 8006204:	20004ef4 	.word	0x20004ef4
 8006208:	20004ee4 	.word	0x20004ee4
 800620c:	20004ed8 	.word	0x20004ed8
 8006210:	20004ee8 	.word	0x20004ee8
 8006214:	20004eec 	.word	0x20004eec

08006218 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d04f      	beq.n	80062ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800622a:	2308      	movs	r3, #8
 800622c:	425b      	negs	r3, r3
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4413      	add	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	4b25      	ldr	r3, [pc, #148]	@ (80062d4 <vPortFree+0xbc>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4013      	ands	r3, r2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10b      	bne.n	800625e <vPortFree+0x46>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	60fb      	str	r3, [r7, #12]
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	e7fd      	b.n	800625a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00b      	beq.n	800627e <vPortFree+0x66>
	__asm volatile
 8006266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626a:	f383 8811 	msr	BASEPRI, r3
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	f3bf 8f4f 	dsb	sy
 8006276:	60bb      	str	r3, [r7, #8]
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	e7fd      	b.n	800627a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	4b14      	ldr	r3, [pc, #80]	@ (80062d4 <vPortFree+0xbc>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4013      	ands	r3, r2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01e      	beq.n	80062ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d11a      	bne.n	80062ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	4b0e      	ldr	r3, [pc, #56]	@ (80062d4 <vPortFree+0xbc>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	43db      	mvns	r3, r3
 800629e:	401a      	ands	r2, r3
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062a4:	f7fe fc76 	bl	8004b94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	4b0a      	ldr	r3, [pc, #40]	@ (80062d8 <vPortFree+0xc0>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4413      	add	r3, r2
 80062b2:	4a09      	ldr	r2, [pc, #36]	@ (80062d8 <vPortFree+0xc0>)
 80062b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062b6:	6938      	ldr	r0, [r7, #16]
 80062b8:	f000 f874 	bl	80063a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80062bc:	4b07      	ldr	r3, [pc, #28]	@ (80062dc <vPortFree+0xc4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3301      	adds	r3, #1
 80062c2:	4a06      	ldr	r2, [pc, #24]	@ (80062dc <vPortFree+0xc4>)
 80062c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80062c6:	f7fe fc73 	bl	8004bb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062ca:	bf00      	nop
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20004ef4 	.word	0x20004ef4
 80062d8:	20004ee4 	.word	0x20004ee4
 80062dc:	20004ef0 	.word	0x20004ef0

080062e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80062ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062ec:	4b27      	ldr	r3, [pc, #156]	@ (800638c <prvHeapInit+0xac>)
 80062ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00c      	beq.n	8006314 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3307      	adds	r3, #7
 80062fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0307 	bic.w	r3, r3, #7
 8006306:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	4a1f      	ldr	r2, [pc, #124]	@ (800638c <prvHeapInit+0xac>)
 8006310:	4413      	add	r3, r2
 8006312:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006318:	4a1d      	ldr	r2, [pc, #116]	@ (8006390 <prvHeapInit+0xb0>)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800631e:	4b1c      	ldr	r3, [pc, #112]	@ (8006390 <prvHeapInit+0xb0>)
 8006320:	2200      	movs	r2, #0
 8006322:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	4413      	add	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800632c:	2208      	movs	r2, #8
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	1a9b      	subs	r3, r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0307 	bic.w	r3, r3, #7
 800633a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4a15      	ldr	r2, [pc, #84]	@ (8006394 <prvHeapInit+0xb4>)
 8006340:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006342:	4b14      	ldr	r3, [pc, #80]	@ (8006394 <prvHeapInit+0xb4>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2200      	movs	r2, #0
 8006348:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800634a:	4b12      	ldr	r3, [pc, #72]	@ (8006394 <prvHeapInit+0xb4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	1ad2      	subs	r2, r2, r3
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006360:	4b0c      	ldr	r3, [pc, #48]	@ (8006394 <prvHeapInit+0xb4>)
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	4a0a      	ldr	r2, [pc, #40]	@ (8006398 <prvHeapInit+0xb8>)
 800636e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	4a09      	ldr	r2, [pc, #36]	@ (800639c <prvHeapInit+0xbc>)
 8006376:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006378:	4b09      	ldr	r3, [pc, #36]	@ (80063a0 <prvHeapInit+0xc0>)
 800637a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800637e:	601a      	str	r2, [r3, #0]
}
 8006380:	bf00      	nop
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	200012d8 	.word	0x200012d8
 8006390:	20004ed8 	.word	0x20004ed8
 8006394:	20004ee0 	.word	0x20004ee0
 8006398:	20004ee8 	.word	0x20004ee8
 800639c:	20004ee4 	.word	0x20004ee4
 80063a0:	20004ef4 	.word	0x20004ef4

080063a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063ac:	4b28      	ldr	r3, [pc, #160]	@ (8006450 <prvInsertBlockIntoFreeList+0xac>)
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e002      	b.n	80063b8 <prvInsertBlockIntoFreeList+0x14>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d8f7      	bhi.n	80063b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	4413      	add	r3, r2
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d108      	bne.n	80063e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	441a      	add	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	441a      	add	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d118      	bne.n	800642c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4b15      	ldr	r3, [pc, #84]	@ (8006454 <prvInsertBlockIntoFreeList+0xb0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d00d      	beq.n	8006422 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	441a      	add	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	e008      	b.n	8006434 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006422:	4b0c      	ldr	r3, [pc, #48]	@ (8006454 <prvInsertBlockIntoFreeList+0xb0>)
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	e003      	b.n	8006434 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	429a      	cmp	r2, r3
 800643a:	d002      	beq.n	8006442 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006442:	bf00      	nop
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	20004ed8 	.word	0x20004ed8
 8006454:	20004ee0 	.word	0x20004ee0

08006458 <memset>:
 8006458:	4402      	add	r2, r0
 800645a:	4603      	mov	r3, r0
 800645c:	4293      	cmp	r3, r2
 800645e:	d100      	bne.n	8006462 <memset+0xa>
 8006460:	4770      	bx	lr
 8006462:	f803 1b01 	strb.w	r1, [r3], #1
 8006466:	e7f9      	b.n	800645c <memset+0x4>

08006468 <__libc_init_array>:
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	4d0d      	ldr	r5, [pc, #52]	@ (80064a0 <__libc_init_array+0x38>)
 800646c:	4c0d      	ldr	r4, [pc, #52]	@ (80064a4 <__libc_init_array+0x3c>)
 800646e:	1b64      	subs	r4, r4, r5
 8006470:	10a4      	asrs	r4, r4, #2
 8006472:	2600      	movs	r6, #0
 8006474:	42a6      	cmp	r6, r4
 8006476:	d109      	bne.n	800648c <__libc_init_array+0x24>
 8006478:	4d0b      	ldr	r5, [pc, #44]	@ (80064a8 <__libc_init_array+0x40>)
 800647a:	4c0c      	ldr	r4, [pc, #48]	@ (80064ac <__libc_init_array+0x44>)
 800647c:	f000 f826 	bl	80064cc <_init>
 8006480:	1b64      	subs	r4, r4, r5
 8006482:	10a4      	asrs	r4, r4, #2
 8006484:	2600      	movs	r6, #0
 8006486:	42a6      	cmp	r6, r4
 8006488:	d105      	bne.n	8006496 <__libc_init_array+0x2e>
 800648a:	bd70      	pop	{r4, r5, r6, pc}
 800648c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006490:	4798      	blx	r3
 8006492:	3601      	adds	r6, #1
 8006494:	e7ee      	b.n	8006474 <__libc_init_array+0xc>
 8006496:	f855 3b04 	ldr.w	r3, [r5], #4
 800649a:	4798      	blx	r3
 800649c:	3601      	adds	r6, #1
 800649e:	e7f2      	b.n	8006486 <__libc_init_array+0x1e>
 80064a0:	0800654c 	.word	0x0800654c
 80064a4:	0800654c 	.word	0x0800654c
 80064a8:	0800654c 	.word	0x0800654c
 80064ac:	08006550 	.word	0x08006550

080064b0 <memcpy>:
 80064b0:	440a      	add	r2, r1
 80064b2:	4291      	cmp	r1, r2
 80064b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80064b8:	d100      	bne.n	80064bc <memcpy+0xc>
 80064ba:	4770      	bx	lr
 80064bc:	b510      	push	{r4, lr}
 80064be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064c6:	4291      	cmp	r1, r2
 80064c8:	d1f9      	bne.n	80064be <memcpy+0xe>
 80064ca:	bd10      	pop	{r4, pc}

080064cc <_init>:
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	bf00      	nop
 80064d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d2:	bc08      	pop	{r3}
 80064d4:	469e      	mov	lr, r3
 80064d6:	4770      	bx	lr

080064d8 <_fini>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	bf00      	nop
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr
